-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | FoundationDB C client bindings
--   
--   FoundationDB C client bindings
@package foundationdb-haskell
@version 0.1.0.0


-- | NOTE: This file is generated from <a>fdb.options</a> by the
--   generate-options executable in this project. All documentation on the
--   individual options in this namespace comes from FoundationDB's
--   documentation in <tt>fdb.options</tt>.
module FoundationDB.Options
data NetworkOption
NetworkOptionString :: Int -> String -> NetworkOption
NetworkOptionInt :: Int -> Int -> NetworkOption
NetworkOptionBytes :: Int -> ByteString -> NetworkOption
NetworkOptionFlag :: Int -> NetworkOption

-- | Deprecated

-- | <i>Deprecated: Deprecated in FDB C API</i>
localAddress :: String -> NetworkOption

-- | Deprecated

-- | <i>Deprecated: Deprecated in FDB C API</i>
clusterFile :: String -> NetworkOption

-- | Enables trace output to a file in a directory of the clients choosing
traceEnable :: String -> NetworkOption

-- | Sets the maximum size in bytes of a single trace output file. This
--   value should be in the range ``[0, INT64_MAX]``. If the value is set
--   to 0, there is no limit on individual file size. The default is a
--   maximum size of 10,485,760 bytes.
traceRollSize :: Int -> NetworkOption

-- | Sets the maximum size of all the trace output files put together. This
--   value should be in the range ``[0, INT64_MAX]``. If the value is set
--   to 0, there is no limit on the total size of the files. The default is
--   a maximum size of 104,857,600 bytes. If the default roll size is used,
--   this means that a maximum of 10 trace files will be written at a time.
traceMaxLogsSize :: Int -> NetworkOption

-- | Sets the <tt>LogGroup</tt> attribute with the specified value for all
--   events in the trace output files. The default log group is 'default'.
traceLogGroup :: String -> NetworkOption

-- | Select the format of the log files. xml (the default) and json are
--   supported.
traceFormat :: String -> NetworkOption

-- | Set internal tuning or debugging knobs
knob :: String -> NetworkOption

-- | Deprecated

-- | <i>Deprecated: Deprecated in FDB C API</i>
tlsPlugin :: String -> NetworkOption

-- | Set the certificate chain
tlsCertBytes :: ByteString -> NetworkOption

-- | Set the file from which to load the certificate chain
tlsCertPath :: String -> NetworkOption

-- | Set the private key corresponding to your own certificate
tlsKeyBytes :: ByteString -> NetworkOption

-- | Set the file from which to load the private key corresponding to your
--   own certificate
tlsKeyPath :: String -> NetworkOption

-- | Set the peer certificate field verification criteria
tlsVerifyPeers :: ByteString -> NetworkOption
buggifyEnable :: NetworkOption
buggifyDisable :: NetworkOption

-- | Set the probability of a BUGGIFY section being active for the current
--   execution. Only applies to code paths first traversed AFTER this
--   option is changed.
buggifySectionActivatedProbability :: Int -> NetworkOption

-- | Set the probability of an active BUGGIFY section being fired
buggifySectionFiredProbability :: Int -> NetworkOption

-- | Set the ca bundle
tlsCaBytes :: ByteString -> NetworkOption

-- | Set the file from which to load the certificate authority bundle
tlsCaPath :: String -> NetworkOption

-- | Set the passphrase for encrypted private key. Password should be set
--   before setting the key for the password to be used.
tlsPassword :: String -> NetworkOption

-- | Disables the multi-version client API and instead uses the local
--   client directly. Must be set before setting up the network.
disableMultiVersionClientApi :: NetworkOption

-- | If set, callbacks from external client libraries can be called from
--   threads created by the FoundationDB client library. Otherwise,
--   callbacks will be called from either the thread used to add the
--   callback or the network thread. Setting this option can improve
--   performance when connected using an external client, but may not be
--   safe to use in all environments. Must be set before setting up the
--   network. WARNING: This feature is considered experimental at this
--   time.
callbacksOnExternalThreads :: NetworkOption

-- | Adds an external client library for use by the multi-version client
--   API. Must be set before setting up the network.
externalClientLibrary :: String -> NetworkOption

-- | Searches the specified path for dynamic libraries and adds them to the
--   list of client libraries for use by the multi-version client API. Must
--   be set before setting up the network.
externalClientDirectory :: String -> NetworkOption

-- | Prevents connections through the local client, allowing only
--   connections through externally loaded client libraries. Intended
--   primarily for testing.
disableLocalClient :: NetworkOption

-- | Disables logging of client statistics, such as sampled transaction
--   activity.
disableClientStatisticsLogging :: NetworkOption

-- | Enables debugging feature to perform slow task profiling. Requires
--   trace logging to be enabled. WARNING: this feature is not recommended
--   for use in production.
enableSlowTaskProfiling :: NetworkOption

-- | This option is set automatically to communicate the list of supported
--   clients to the active client.
supportedClientVersions :: String -> NetworkOption

-- | This option is set automatically on all clients loaded externally
--   using the multi-version API.
externalClient :: NetworkOption

-- | This option tells a child on a multiversion client what transport ID
--   to use.
externalClientTransportId :: Int -> NetworkOption
data DatabaseOption
DatabaseOptionString :: Int -> String -> DatabaseOption
DatabaseOptionInt :: Int -> Int -> DatabaseOption
DatabaseOptionBytes :: Int -> ByteString -> DatabaseOption
DatabaseOptionFlag :: Int -> DatabaseOption

-- | Set the size of the client location cache. Raising this value can
--   boost performance in very large databases where clients access data in
--   a near-random pattern. Defaults to 100000.
locationCacheSize :: Int -> DatabaseOption

-- | Set the maximum number of watches allowed to be outstanding on a
--   database connection. Increasing this number could result in increased
--   resource usage. Reducing this number will not cancel any outstanding
--   watches. Defaults to 10000 and cannot be larger than 1000000.
maxWatches :: Int -> DatabaseOption

-- | Specify the machine ID that was passed to fdbserver processes running
--   on the same machine as this client, for better location-aware load
--   balancing.
machineId :: String -> DatabaseOption

-- | Specify the datacenter ID that was passed to fdbserver processes
--   running in the same datacenter as this client, for better
--   location-aware load balancing.
datacenterId :: String -> DatabaseOption

-- | Set a timeout in milliseconds which, when elapsed, will cause each
--   transaction automatically to be cancelled. This sets the
--   `<a>timeout</a>` option of each transaction created by this database.
--   See the transaction option description for more information. Using
--   this option requires that the API version is 610 or higher.
transactionTimeout :: Int -> DatabaseOption

-- | Set a timeout in milliseconds which, when elapsed, will cause a
--   transaction automatically to be cancelled. This sets the
--   `<tt>retry_limit</tt>` option of each transaction created by this
--   database. See the transaction option description for more information.
transactionRetryLimit :: Int -> DatabaseOption

-- | Set the maximum amount of backoff delay incurred in the call to
--   `<tt>onError</tt>` if the error is retryable. This sets the
--   `<tt>max_retry_delay</tt>` option of each transaction created by this
--   database. See the transaction option description for more information.
transactionMaxRetryDelay :: Int -> DatabaseOption

-- | Snapshot read operations will see the results of writes done in the
--   same transaction. This is the default behavior.
dbSnapshotRywEnable :: DatabaseOption

-- | Snapshot read operations will not see the results of writes done in
--   the same transaction. This was the default behavior prior to API
--   version 300.
dbSnapshotRywDisable :: DatabaseOption
data TransactionOption
TransactionOptionString :: Int -> String -> TransactionOption
TransactionOptionInt :: Int -> Int -> TransactionOption
TransactionOptionBytes :: Int -> ByteString -> TransactionOption
TransactionOptionFlag :: Int -> TransactionOption

-- | The transaction, if not self-conflicting, may be committed a second
--   time after commit succeeds, in the event of a fault
causalWriteRisky :: TransactionOption

-- | The read version will be committed, and usually will be the latest
--   committed, but might not be the latest committed in the event of a
--   fault or partition
causalReadRisky :: TransactionOption
causalReadDisable :: TransactionOption

-- | The next write performed on this transaction will not generate a write
--   conflict range. As a result, other transactions which read the key(s)
--   being modified by the next write will not conflict with this
--   transaction. Care needs to be taken when using this option on a
--   transaction that is shared between multiple threads. When setting this
--   option, write conflict ranges will be disabled on the next write
--   operation, regardless of what thread it is on.
nextWriteNoWriteConflictRange :: TransactionOption

-- | Committing this transaction will bypass the normal load balancing
--   across proxies and go directly to the specifically nominated 'first
--   proxy'.
commitOnFirstProxy :: TransactionOption
checkWritesEnable :: TransactionOption

-- | Reads performed by a transaction will not see any prior mutations that
--   occured in that transaction, instead seeing the value which was in the
--   database at the transaction's read version. This option may provide a
--   small performance benefit for the client, but also disables a number
--   of client-side optimizations which are beneficial for transactions
--   which tend to read and write the same keys within a single
--   transaction.
readYourWritesDisable :: TransactionOption

-- | Deprecated

-- | <i>Deprecated: Deprecated in FDB C API</i>
readAheadDisable :: TransactionOption
durabilityDatacenter :: TransactionOption
durabilityRisky :: TransactionOption

-- | Deprecated

-- | <i>Deprecated: Deprecated in FDB C API</i>
durabilityDevNullIsWebScale :: TransactionOption

-- | Specifies that this transaction should be treated as highest priority
--   and that lower priority transactions should block behind this one. Use
--   is discouraged outside of low-level tools
prioritySystemImmediate :: TransactionOption

-- | Specifies that this transaction should be treated as low priority and
--   that default priority transactions will be processed first. Batch
--   priority transactions will also be throttled at load levels smaller
--   than for other types of transactions and may be fully cut off in the
--   event of machine failures. Useful for doing batch work simultaneously
--   with latency-sensitive work
priorityBatch :: TransactionOption

-- | This is a write-only transaction which sets the initial configuration.
--   This option is designed for use by database system tools only.
initializeNewDatabase :: TransactionOption

-- | Allows this transaction to read and modify system keys (those that
--   start with the byte 0xFF)
accessSystemKeys :: TransactionOption

-- | Allows this transaction to read system keys (those that start with the
--   byte 0xFF)
readSystemKeys :: TransactionOption
debugDump :: TransactionOption
debugRetryLogging :: String -> TransactionOption

-- | Deprecated

-- | <i>Deprecated: Deprecated in FDB C API</i>
transactionLoggingEnable :: String -> TransactionOption

-- | Sets a client provided identifier for the transaction that will be
--   used in scenarios like tracing or profiling. Client trace logging or
--   transaction profiling must be separately enabled.
debugTransactionIdentifier :: String -> TransactionOption

-- | Enables tracing for this transaction and logs results to the client
--   trace logs. The DEBUG_TRANSACTION_IDENTIFIER option must be set before
--   using this option, and client trace logging must be enabled and to get
--   log output.
logTransaction :: TransactionOption

-- | Set a timeout in milliseconds which, when elapsed, will cause the
--   transaction automatically to be cancelled. Valid parameter values are
--   ``[0, INT_MAX]``. If set to 0, will disable all timeouts. All pending
--   and any future uses of the transaction will throw an exception. The
--   transaction can be used again after it is reset. Prior to API version
--   610, like all other transaction options, the timeout must be reset
--   after a call to `<tt>onError</tt>`. If the API version is 610 or
--   greater, the timeout is not reset after an `<tt>onError</tt>` call.
--   This allows the user to specify a longer timeout on specific
--   transactions than the default timeout specified through the
--   `<tt>transaction_timeout</tt>` database option without the shorter
--   database timeout cancelling transactions that encounter a retryable
--   error. Note that at all API versions, it is safe and legal to set the
--   timeout each time the transaction begins, so most code written
--   assuming the older behavior can be upgraded to the newer behavior
--   without requiring any modification, and the caller is not required to
--   implement special logic in retry loops to only conditionally set this
--   option.
timeout :: Int -> TransactionOption

-- | Set a maximum number of retries after which additional calls to
--   `<tt>onError</tt>` will throw the most recently seen error code. Valid
--   parameter values are ``[-1, INT_MAX]``. If set to -1, will disable the
--   retry limit. Prior to API version 610, like all other transaction
--   options, the retry limit must be reset after a call to
--   `<tt>onError</tt>`. If the API version is 610 or greater, the retry
--   limit is not reset after an `<tt>onError</tt>` call. Note that at all
--   API versions, it is safe and legal to set the retry limit each time
--   the transaction begins, so most code written assuming the older
--   behavior can be upgraded to the newer behavior without requiring any
--   modification, and the caller is not required to implement special
--   logic in retry loops to only conditionally set this option.
retryLimit :: Int -> TransactionOption

-- | Set the maximum amount of backoff delay incurred in the call to
--   `<tt>onError</tt>` if the error is retryable. Defaults to 1000 ms.
--   Valid parameter values are ``[0, INT_MAX]``. If the maximum retry
--   delay is less than the current retry delay of the transaction, then
--   the current retry delay will be clamped to the maximum retry delay.
--   Prior to API version 610, like all other transaction options, the
--   maximum retry delay must be reset after a call to `<tt>onError</tt>`.
--   If the API version is 610 or greater, the retry limit is not reset
--   after an `<tt>onError</tt>` call. Note that at all API versions, it is
--   safe and legal to set the maximum retry delay each time the
--   transaction begins, so most code written assuming the older behavior
--   can be upgraded to the newer behavior without requiring any
--   modification, and the caller is not required to implement special
--   logic in retry loops to only conditionally set this option.
maxRetryDelay :: Int -> TransactionOption

-- | Snapshot read operations will see the results of writes done in the
--   same transaction. This is the default behavior.
snapshotRywEnable :: TransactionOption

-- | Snapshot read operations will not see the results of writes done in
--   the same transaction. This was the default behavior prior to API
--   version 300.
snapshotRywDisable :: TransactionOption

-- | The transaction can read and write to locked databases, and is
--   resposible for checking that it took the lock.
lockAware :: TransactionOption

-- | By default, operations that are performed on a transaction while it is
--   being committed will not only fail themselves, but they will attempt
--   to fail other in-flight operations (such as the commit) as well. This
--   behavior is intended to help developers discover situations where
--   operations could be unintentionally executed after the transaction has
--   been reset. Setting this option removes that protection, causing only
--   the offending operation to fail.
usedDuringCommitProtectionDisable :: TransactionOption

-- | The transaction can read from locked databases.
readLockAware :: TransactionOption

-- | No other transactions will be applied before this transaction within
--   the same commit version.
firstInBatch :: TransactionOption

-- | This option should only be used by tools which change the database
--   configuration.
useProvisionalProxies :: TransactionOption
data StreamingMode
StreamingModeString :: Int -> String -> StreamingMode
StreamingModeInt :: Int -> Int -> StreamingMode
StreamingModeBytes :: Int -> ByteString -> StreamingMode
StreamingModeFlag :: Int -> StreamingMode

-- | Client intends to consume the entire range and would like it all
--   transferred as early as possible.
wantAll :: StreamingMode

-- | The default. The client doesn't know how much of the range it is
--   likely to used and wants different performance concerns to be
--   balanced. Only a small portion of data is transferred to the client
--   initially (in order to minimize costs if the client doesn't read the
--   entire range), and as the caller iterates over more items in the range
--   larger batches will be transferred in order to minimize latency.
iterator :: StreamingMode

-- | Infrequently used. The client has passed a specific row limit and
--   wants that many rows delivered in a single batch. Because of iterator
--   operation in client drivers make request batches transparent to the
--   user, consider `<tt>WANT_ALL</tt>` StreamingMode instead. A row limit
--   must be specified if this mode is used.
exact :: StreamingMode

-- | Infrequently used. Transfer data in batches small enough to not be
--   much more expensive than reading individual rows, to minimize cost if
--   iteration stops early.
small :: StreamingMode

-- | Infrequently used. Transfer data in batches sized in between small and
--   large.
medium :: StreamingMode

-- | Infrequently used. Transfer data in batches large enough to be, in a
--   high-concurrency environment, nearly as efficient as possible. If the
--   client stops iteration early, some disk and network bandwidth may be
--   wasted. The batch size may still be too small to allow a single client
--   to get high throughput from the database, so if that is what you need
--   consider the SERIAL StreamingMode.
large :: StreamingMode

-- | Transfer data in batches large enough that an individual client can
--   get reasonable read bandwidth from the database. If the client stops
--   iteration early, considerable disk and network bandwidth may be
--   wasted.
serial :: StreamingMode
data MutationType
MutationTypeString :: Int -> String -> MutationType
MutationTypeInt :: Int -> Int -> MutationType
MutationTypeBytes :: Int -> ByteString -> MutationType
MutationTypeFlag :: Int -> MutationType

-- | Performs an addition of little-endian integers. If the existing value
--   in the database is not present or shorter than `<tt>param</tt>`, it is
--   first extended to the length of `<tt>param</tt>` with zero bytes. If
--   `<tt>param</tt>` is shorter than the existing value in the database,
--   the existing value is truncated to match the length of
--   `<tt>param</tt>`. The integers to be added must be stored in a
--   little-endian representation. They can be signed in two's complement
--   representation or unsigned. You can add to an integer at a known
--   offset in the value by prepending the appropriate number of zero bytes
--   to `<tt>param</tt>` and padding with zero bytes to match the length of
--   the value. However, this offset technique requires that you know the
--   addition will not cause the integer field within the value to
--   overflow.
add :: ByteString -> MutationType

-- | Deprecated

-- | <i>Deprecated: Deprecated in FDB C API</i>
and :: ByteString -> MutationType

-- | Performs a bitwise `<a>and</a>` operation. If the existing value in
--   the database is not present, then `<tt>param</tt>` is stored in the
--   database. If the existing value in the database is shorter than
--   `<tt>param</tt>`, it is first extended to the length of
--   `<tt>param</tt>` with zero bytes. If `<tt>param</tt>` is shorter than
--   the existing value in the database, the existing value is truncated to
--   match the length of `<tt>param</tt>`.
bitAnd :: ByteString -> MutationType

-- | Deprecated

-- | <i>Deprecated: Deprecated in FDB C API</i>
or :: ByteString -> MutationType

-- | Performs a bitwise `<a>or</a>` operation. If the existing value in the
--   database is not present or shorter than `<tt>param</tt>`, it is first
--   extended to the length of `<tt>param</tt>` with zero bytes. If
--   `<tt>param</tt>` is shorter than the existing value in the database,
--   the existing value is truncated to match the length of
--   `<tt>param</tt>`.
bitOr :: ByteString -> MutationType

-- | Deprecated

-- | <i>Deprecated: Deprecated in FDB C API</i>
xor :: ByteString -> MutationType

-- | Performs a bitwise `<a>xor</a>` operation. If the existing value in
--   the database is not present or shorter than `<tt>param</tt>`, it is
--   first extended to the length of `<tt>param</tt>` with zero bytes. If
--   `<tt>param</tt>` is shorter than the existing value in the database,
--   the existing value is truncated to match the length of
--   `<tt>param</tt>`.
bitXor :: ByteString -> MutationType

-- | Appends `<tt>param</tt>` to the end of the existing value already in
--   the database at the given key (or creates the key and sets the value
--   to `<tt>param</tt>` if the key is empty). This will only append the
--   value if the final concatenated value size is less than or equal to
--   the maximum value size (i.e., if it fits). WARNING: No error is
--   surfaced back to the user if the final value is too large because the
--   mutation will not be applied until after the transaction has been
--   committed. Therefore, it is only safe to use this mutation type if one
--   can guarantee that one will keep the total value size under the
--   maximum size.
appendIfFits :: ByteString -> MutationType

-- | Performs a little-endian comparison of byte strings. If the existing
--   value in the database is not present or shorter than `<tt>param</tt>`,
--   it is first extended to the length of `<tt>param</tt>` with zero
--   bytes. If `<tt>param</tt>` is shorter than the existing value in the
--   database, the existing value is truncated to match the length of
--   `<tt>param</tt>`. The larger of the two values is then stored in the
--   database.
max :: ByteString -> MutationType

-- | Performs a little-endian comparison of byte strings. If the existing
--   value in the database is not present, then `<tt>param</tt>` is stored
--   in the database. If the existing value in the database is shorter than
--   `<tt>param</tt>`, it is first extended to the length of
--   `<tt>param</tt>` with zero bytes. If `<tt>param</tt>` is shorter than
--   the existing value in the database, the existing value is truncated to
--   match the length of `<tt>param</tt>`. The smaller of the two values is
--   then stored in the database.
min :: ByteString -> MutationType

-- | Transforms `<tt>key</tt>` using a versionstamp for the transaction.
--   Sets the transformed key in the database to `<tt>param</tt>`. The key
--   is transformed by removing the final four bytes from the key and
--   reading those as a little-Endian 32-bit integer to get a position
--   `<tt>pos</tt>`. The 10 bytes of the key from `<tt>pos</tt>` to ``pos +
--   10`` are replaced with the versionstamp of the transaction used. The
--   first byte of the key is position 0. A versionstamp is a 10 byte,
--   unique, monotonically (but not sequentially) increasing value for each
--   committed transaction. The first 8 bytes are the committed version of
--   the database (serialized in big-Endian order). The last 2 bytes are
--   monotonic in the serialization order for transactions. WARNING: At
--   this time, versionstamps are compatible with the Tuple layer only in
--   the Java, Python, and Go bindings. Also, note that prior to API
--   version 520, the offset was computed from only the final two bytes
--   rather than the final four bytes.
setVersionstampedKey :: ByteString -> MutationType

-- | Transforms `<tt>param</tt>` using a versionstamp for the transaction.
--   Sets the `<tt>key</tt>` given to the transformed `<tt>param</tt>`. The
--   parameter is transformed by removing the final four bytes from
--   `<tt>param</tt>` and reading those as a little-Endian 32-bit integer
--   to get a position `<tt>pos</tt>`. The 10 bytes of the parameter from
--   `<tt>pos</tt>` to ``pos + 10`` are replaced with the versionstamp of
--   the transaction used. The first byte of the parameter is position 0. A
--   versionstamp is a 10 byte, unique, monotonically (but not
--   sequentially) increasing value for each committed transaction. The
--   first 8 bytes are the committed version of the database (serialized in
--   big-Endian order). The last 2 bytes are monotonic in the serialization
--   order for transactions. WARNING: At this time, versionstamps are
--   compatible with the Tuple layer only in the Java, Python, and Go
--   bindings. Also, note that prior to API version 520, the versionstamp
--   was always placed at the beginning of the parameter rather than
--   computing an offset.
setVersionstampedValue :: ByteString -> MutationType

-- | Performs lexicographic comparison of byte strings. If the existing
--   value in the database is not present, then `<tt>param</tt>` is stored.
--   Otherwise the smaller of the two values is then stored in the
--   database.
byteMin :: ByteString -> MutationType

-- | Performs lexicographic comparison of byte strings. If the existing
--   value in the database is not present, then `<tt>param</tt>` is stored.
--   Otherwise the larger of the two values is then stored in the database.
byteMax :: ByteString -> MutationType

-- | Performs an atomic ``compare and clear`` operation. If the existing
--   value in the database is equal to the given value, then given key is
--   cleared.
compareAndClear :: ByteString -> MutationType
data ConflictRangeType
ConflictRangeTypeString :: Int -> String -> ConflictRangeType
ConflictRangeTypeInt :: Int -> Int -> ConflictRangeType
ConflictRangeTypeBytes :: Int -> ByteString -> ConflictRangeType
ConflictRangeTypeFlag :: Int -> ConflictRangeType

-- | Used to add a read conflict range
read :: ConflictRangeType

-- | Used to add a write conflict range
write :: ConflictRangeType
data ErrorPredicate
ErrorPredicateString :: Int -> String -> ErrorPredicate
ErrorPredicateInt :: Int -> Int -> ErrorPredicate
ErrorPredicateBytes :: Int -> ByteString -> ErrorPredicate
ErrorPredicateFlag :: Int -> ErrorPredicate

-- | Returns `<tt>true</tt>` if the error indicates the operations in the
--   transactions should be retried because of transient error.
retryable :: ErrorPredicate

-- | Returns `<tt>true</tt>` if the error indicates the transaction may
--   have succeeded, though not in a way the system can verify.
maybeCommitted :: ErrorPredicate

-- | Returns `<tt>true</tt>` if the error indicates the transaction has not
--   committed, though in a way that can be retried.
retryableNotCommitted :: ErrorPredicate
instance GHC.Classes.Ord FoundationDB.Options.ErrorPredicate
instance GHC.Classes.Eq FoundationDB.Options.ErrorPredicate
instance GHC.Read.Read FoundationDB.Options.ErrorPredicate
instance GHC.Show.Show FoundationDB.Options.ErrorPredicate
instance GHC.Classes.Ord FoundationDB.Options.ConflictRangeType
instance GHC.Classes.Eq FoundationDB.Options.ConflictRangeType
instance GHC.Read.Read FoundationDB.Options.ConflictRangeType
instance GHC.Show.Show FoundationDB.Options.ConflictRangeType
instance GHC.Classes.Ord FoundationDB.Options.MutationType
instance GHC.Classes.Eq FoundationDB.Options.MutationType
instance GHC.Read.Read FoundationDB.Options.MutationType
instance GHC.Show.Show FoundationDB.Options.MutationType
instance GHC.Classes.Ord FoundationDB.Options.StreamingMode
instance GHC.Classes.Eq FoundationDB.Options.StreamingMode
instance GHC.Read.Read FoundationDB.Options.StreamingMode
instance GHC.Show.Show FoundationDB.Options.StreamingMode
instance GHC.Classes.Ord FoundationDB.Options.TransactionOption
instance GHC.Classes.Eq FoundationDB.Options.TransactionOption
instance GHC.Read.Read FoundationDB.Options.TransactionOption
instance GHC.Show.Show FoundationDB.Options.TransactionOption
instance GHC.Classes.Ord FoundationDB.Options.DatabaseOption
instance GHC.Classes.Eq FoundationDB.Options.DatabaseOption
instance GHC.Read.Read FoundationDB.Options.DatabaseOption
instance GHC.Show.Show FoundationDB.Options.DatabaseOption
instance GHC.Classes.Ord FoundationDB.Options.NetworkOption
instance GHC.Classes.Eq FoundationDB.Options.NetworkOption
instance GHC.Read.Read FoundationDB.Options.NetworkOption
instance GHC.Show.Show FoundationDB.Options.NetworkOption


-- | Raw bindings to the underlying C client API. These are not memory
--   safe. For documentation, see
--   <a>https://apple.github.io/foundationdb/api-c.html</a>.
module FoundationDB.Internal.Bindings

-- | Current version of the installed FDB library.
currentAPIVersion :: Int
selectAPIVersion :: (Int) -> IO ((CFDBError))
setupNetwork :: IO ((CFDBError))
runNetwork :: IO ((CFDBError))
stopNetwork :: IO ((CFDBError))
networkSetOption :: NetworkOption -> IO CFDBError
newtype Future a
Future :: (Ptr (Future a)) -> Future a
futureCancel :: (Future a) -> IO ()
futureDestroy :: (Future a) -> IO ()
futureDestroyPtr :: FunPtr (Ptr a -> IO ())
futureBlockUntilReady :: (Future a) -> IO ((CFDBError))
futureIsReady :: (Future a) -> IO ((Bool))
futureReleaseMemory :: (Future a) -> IO ()
futureGetError :: (Future a) -> IO ((CFDBError))
futureGetVersion :: (Future Int64) -> IO ((CFDBError), (Int64))
futureGetKey :: Future ByteString -> IO (Either CFDBError ByteString)
futureGetValue :: Future (Maybe ByteString) -> IO (Either CFDBError (Maybe ByteString))
futureGetStringArray :: Future [ByteString] -> IO (Either CFDBError [ByteString])
data FDBKeyValue
FDBKeyValue :: Ptr () -> Int -> Ptr () -> Int -> FDBKeyValue
[key] :: FDBKeyValue -> Ptr ()
[key_length] :: FDBKeyValue -> Int
[value] :: FDBKeyValue -> Ptr ()
[value_length] :: FDBKeyValue -> Int
futureGetKeyValueArray :: Future [(ByteString, ByteString)] -> IO (Either CFDBError ([(ByteString, ByteString)], Bool))

-- | Handle to the underlying C API client state.
data Database
createDatabase :: (String) -> IO ((CFDBError), (Database))
databaseDestroy :: (Database) -> IO ()
databaseSetOption :: Database -> DatabaseOption -> IO CFDBError
databaseCreateTransaction :: (Database) -> IO ((CFDBError), (Transaction))
data Transaction

-- | Specifies a key in the database. See the official <a>docs</a> for more
--   information. These can be supplied to <tt>getKey</tt> or used to build
--   a <tt>Range</tt>.
data KeySelector

-- | Selects the lexicographically greatest key less than the specified
--   key.
LastLessThan :: ByteString -> KeySelector

-- | Selects the lexicographically greatest less than or equal to the
--   specified key.
LastLessOrEq :: ByteString -> KeySelector

-- | Selects the lexicographically least key greater than the specified
--   key.
FirstGreaterThan :: ByteString -> KeySelector

-- | Selects the lexicographically least key greater than or equal to the
--   specified key.
FirstGreaterOrEq :: ByteString -> KeySelector

-- | offsets a key selector. Using <tt>offset</tt> is preferred, since it
--   handles normalization to prevent nested <a>WithOffset</a>s.
WithOffset :: Int -> KeySelector -> KeySelector
keySelectorBytes :: KeySelector -> ByteString

-- | Convert a <a>KeySelector</a> to its or_equal, offset settings.
--   Equivalent to the macros <tt>FDB_KEYSEL_LAST_LESS_THAN</tt> etc.
keySelectorTuple :: KeySelector -> (ByteString, Bool, Int)

-- | Inverse of <a>keySelectorTuple</a>
tupleKeySelector :: (ByteString, Bool, Int) -> KeySelector
transactionDestroy :: (Transaction) -> IO ()
transactionSetOption :: Transaction -> TransactionOption -> IO CFDBError
transactionSetReadVersion :: (Transaction) -> (Int64) -> IO ()
transactionGetReadVersion :: (Transaction) -> IO ((Future Int64))
transactionGet :: Transaction -> ByteString -> Bool -> IO (Future (Maybe ByteString))
transactionGetKey :: Transaction -> ByteString -> Bool -> Int -> Bool -> IO (Future ByteString)
transactionGetAddressesForKey :: Transaction -> ByteString -> IO (Future [ByteString])
transactionGetRange :: Transaction -> KeySelector -> KeySelector -> Int -> Int -> FDBStreamingMode -> Int -> Bool -> Bool -> IO (Future [(ByteString, ByteString)])
data FDBStreamingMode
StreamingModeWantAll :: FDBStreamingMode
StreamingModeIterator :: FDBStreamingMode
StreamingModeExact :: FDBStreamingMode
StreamingModeSmall :: FDBStreamingMode
StreamingModeMedium :: FDBStreamingMode
StreamingModeLarge :: FDBStreamingMode
StreamingModeSerial :: FDBStreamingMode
transactionSet :: Transaction -> ByteString -> ByteString -> IO ()
transactionClear :: Transaction -> ByteString -> IO ()
transactionClearRange :: Transaction -> ByteString -> ByteString -> IO ()
transactionAtomicOp :: Transaction -> ByteString -> MutationType -> IO ()
transactionCommit :: (Transaction) -> IO ((Future ()))
transactionGetCommittedVersion :: (Transaction) -> IO ((CFDBError), (Int))
transactionGetVersionstamp :: (Transaction) -> IO ((Future ByteString))
transactionWatch :: Transaction -> ByteString -> IO (Future ())
transactionOnError :: (Transaction) -> (CFDBError) -> IO ((Future ()))
transactionReset :: (Transaction) -> IO ()
transactionCancel :: (Transaction) -> IO ()
transactionAddConflictRange :: Transaction -> ByteString -> ByteString -> FDBConflictRangeType -> IO CFDBError
data FDBConflictRangeType
ConflictRangeTypeRead :: FDBConflictRangeType
ConflictRangeTypeWrite :: FDBConflictRangeType
newtype CFDBError
CFDBError :: CInt -> CFDBError
[getCFDBError] :: CFDBError -> CInt

-- | Return <a>True</a> iff <a>CFDBError</a> value is an error (non-zero).
isError :: CFDBError -> Bool
getError :: (CFDBError) -> IO ((String))
errorPredicate :: (FDBErrorPredicate) -> (CFDBError) -> (Bool)
data FDBErrorPredicate
ErrorPredicateRetryable :: FDBErrorPredicate
ErrorPredicateMaybeCommitted :: FDBErrorPredicate
ErrorPredicateRetryableNotCommitted :: FDBErrorPredicate
instance GHC.Classes.Ord FoundationDB.Internal.Bindings.KeySelector
instance GHC.Classes.Eq FoundationDB.Internal.Bindings.KeySelector
instance GHC.Show.Show FoundationDB.Internal.Bindings.KeySelector
instance GHC.Classes.Eq FoundationDB.Internal.Bindings.FDBKeyValue
instance GHC.Show.Show FoundationDB.Internal.Bindings.FDBKeyValue
instance GHC.Num.Num FoundationDB.Internal.Bindings.CFDBError
instance GHC.Classes.Ord FoundationDB.Internal.Bindings.CFDBError
instance GHC.Classes.Eq FoundationDB.Internal.Bindings.CFDBError
instance GHC.Show.Show FoundationDB.Internal.Bindings.CFDBError
instance GHC.Show.Show (FoundationDB.Internal.Bindings.Future a)
instance Foreign.Storable.Storable (FoundationDB.Internal.Bindings.Future a)
instance GHC.Show.Show FoundationDB.Internal.Bindings.Database
instance Foreign.Storable.Storable FoundationDB.Internal.Bindings.Database
instance GHC.Show.Show FoundationDB.Internal.Bindings.Transaction
instance Foreign.Storable.Storable FoundationDB.Internal.Bindings.Transaction
instance GHC.Classes.Eq FoundationDB.Internal.Bindings.FDBStreamingMode
instance GHC.Classes.Ord FoundationDB.Internal.Bindings.FDBStreamingMode
instance GHC.Enum.Bounded FoundationDB.Internal.Bindings.FDBStreamingMode
instance GHC.Show.Show FoundationDB.Internal.Bindings.FDBStreamingMode
instance GHC.Classes.Eq FoundationDB.Internal.Bindings.FDBConflictRangeType
instance GHC.Classes.Ord FoundationDB.Internal.Bindings.FDBConflictRangeType
instance GHC.Show.Show FoundationDB.Internal.Bindings.FDBConflictRangeType
instance GHC.Classes.Eq FoundationDB.Internal.Bindings.FDBErrorPredicate
instance GHC.Classes.Ord FoundationDB.Internal.Bindings.FDBErrorPredicate
instance GHC.Show.Show FoundationDB.Internal.Bindings.FDBErrorPredicate
instance GHC.Enum.Enum FoundationDB.Internal.Bindings.FDBErrorPredicate
instance GHC.Enum.Enum FoundationDB.Internal.Bindings.FDBConflictRangeType
instance GHC.Enum.Enum FoundationDB.Internal.Bindings.FDBStreamingMode
instance Foreign.Storable.Storable FoundationDB.Internal.Bindings.FDBKeyValue

module FoundationDB.Error.Internal
fdbEither :: MonadIO m => m (CFDBError, a) -> m (Either Error a)
fdbExcept :: (MonadError Error m, MonadIO m) => IO (CFDBError, a) -> m a
fdbEither' :: MonadIO m => m CFDBError -> m (Either Error ())
fdbExcept' :: (MonadError Error m, MonadIO m) => IO CFDBError -> m ()
liftFDBError :: MonadError Error m => Either CFDBError a -> m a
fdbThrowing :: IO (CFDBError, a) -> IO a
fdbThrowing' :: IO CFDBError -> IO ()

-- | Represents all errors that can occur when running a
--   <tt>Transaction</tt>.
data Error
CError :: CError -> Error
Error :: FDBHsError -> Error
data DirLayerUserError

-- | Thrown if the user attempts to open the root directory.
CannotOpenRoot :: DirLayerUserError

-- | Thrown if the user specifies a manual prefix that is already in use.
PrefixInUse :: DirLayerUserError

-- | Thrown if a prefix manually specified by the user previously conflicts
--   with a prefix chosen by the automatic allocator. Includes the
--   conflicting prefix.
ManualPrefixConflict :: ByteString -> DirLayerUserError

-- | The <tt>layer</tt> bytestring provided to <tt>open'</tt> does not
--   match the layer already present. The mismatched layers are included in
--   this constructor.
LayerMismatch :: ByteString -> ByteString -> DirLayerUserError

-- | Thrown if the directory layer structure already in FoundationDB is a
--   newer major version than that provided by this library. This would
--   mean that the directory layer was originally created by a newer
--   version of one of the FoundationDB client libraries. The major, minor,
--   micro version of the directory layer are provided to this constructor.
VersionError :: Word32 -> Word32 -> Word32 -> DirLayerUserError

-- | Errors arising from the foundationdb-haskell library implementation.
data FDBHsError

-- | Errors that can occur from user error when using the directory layer.
DirLayerUserError :: DirLayerUserError -> FDBHsError

-- | Errors that can occur when doing directory layer operations. These can
--   be indicative of bugs in foundationdb-haskell.
DirectoryLayerInternalError :: String -> FDBHsError

-- | Errors in parsing tuples.
ParseError :: String -> FDBHsError

-- | Thrown by foundationdb-haskell's transaction retry logic. Contains the
--   underlying error from the C bindings that caused the transaction to be
--   retried.
MaxRetriesExceeded :: Error -> FDBHsError

-- | Thrown by foundationdb-haskell on startup if the Haskell code doesn't
--   support the desired API version. This can happen even if the
--   underlying C library does support the desired version -- we sometimes
--   drop support for older versions sooner than the C API.
UnsupportedAPIVersion :: FDBHsError

-- | Errors that can come from the underlying C library. Most error names
--   are self-explanatory. See
--   <a>https://apple.github.io/foundationdb/api-error-codes.html#developer-guide-error-codes</a>
--   for a description of these errors.
data CError
OperationFailed :: CError
TimedOut :: CError
TransactionTooOld :: CError
FutureVersion :: CError

-- | Returned if a transaction failed because of a conflict.
NotCommitted :: CError
CommitUnknownResult :: CError
TransactionCanceled :: CError
TransactionTimedOut :: CError
TooManyWatches :: CError
WatchesDisabled :: CError
AccessedUnreadable :: CError
DatabaseLocked :: CError
ClusterVersionChanged :: CError
ExternalClientAlreadyLoaded :: CError
OperationCancelled :: CError
FutureReleased :: CError
PlatformError :: CError
LargeAllocFailed :: CError
PerformanceCounterError :: CError
IOError :: CError
FileNotFound :: CError
BindFailed :: CError
FileNotReadable :: CError
FileNotWritable :: CError
NoClusterFileFound :: CError
FileTooLarge :: CError
ClientInvalidOperation :: CError
CommitReadIncomplete :: CError
TestSpecificationInvalid :: CError
KeyOutsideLegalRange :: CError
InvertedRange :: CError
InvalidOptionValue :: CError
InvalidOption :: CError
NetworkNotSetup :: CError
NetworkAlreadySetup :: CError
ReadVersionAlreadySet :: CError
VersionInvalid :: CError
RangeLimitsInvalid :: CError
InvalidDatabaseName :: CError
AttributeNotFound :: CError
FutureNotSet :: CError
FutureNotError :: CError
UsedDuringCommit :: CError
InvalidMutationType :: CError
TransactionInvalidVersion :: CError
NoCommitVersion :: CError
EnvironmentVariableNetworkOptionFailed :: CError
TransactionReadOnly :: CError
IncompatibleProtocolVersion :: CError
TransactionTooLarge :: CError
KeyTooLarge :: CError
ValueTooLarge :: CError
ConnectionStringInvalid :: CError
AddressInUse :: CError
InvalidLocalAddress :: CError
TLSError :: CError
UnsupportedOperation :: CError
APIVersionUnset :: CError
APIVersionAlreadySet :: CError
APIVersionInvalid :: CError
APIVersionNotSupported :: CError
ExactModeWithoutLimits :: CError
UnknownError :: CError
InternalError :: CError
OtherError :: CFDBError -> CError
[getOtherError] :: CError -> CFDBError

-- | Convert error int to <a>CError</a> sum. If 0 (which indicates
--   success), returns <a>Nothing</a>. See <tt>isError</tt> for another way
--   to guard for success.
toError :: CFDBError -> Maybe CError
toCFDBError :: CError -> CFDBError

-- | Returns true if the given error indicates that the erroring
--   transaction can be tried, but the transaction might have already been
--   committed. The transaction should only be retried if it is idempotent.
retryable :: Error -> Bool

-- | Returns true if the given error indicates that the transaction was
--   definitely not committed.
retryableNotCommitted :: Error -> Bool
instance GHC.Classes.Ord FoundationDB.Error.Internal.FDBHsError
instance GHC.Classes.Eq FoundationDB.Error.Internal.FDBHsError
instance GHC.Show.Show FoundationDB.Error.Internal.FDBHsError
instance GHC.Classes.Ord FoundationDB.Error.Internal.Error
instance GHC.Classes.Eq FoundationDB.Error.Internal.Error
instance GHC.Show.Show FoundationDB.Error.Internal.Error
instance GHC.Classes.Ord FoundationDB.Error.Internal.CError
instance GHC.Classes.Eq FoundationDB.Error.Internal.CError
instance GHC.Show.Show FoundationDB.Error.Internal.CError
instance GHC.Classes.Ord FoundationDB.Error.Internal.DirLayerUserError
instance GHC.Classes.Eq FoundationDB.Error.Internal.DirLayerUserError
instance GHC.Show.Show FoundationDB.Error.Internal.DirLayerUserError
instance GHC.Exception.Exception FoundationDB.Error.Internal.Error

module FoundationDB.Error

-- | Represents all errors that can occur when running a
--   <tt>Transaction</tt>.
data Error
CError :: CError -> Error
Error :: FDBHsError -> Error
data DirLayerUserError

-- | Thrown if the user attempts to open the root directory.
CannotOpenRoot :: DirLayerUserError

-- | Thrown if the user specifies a manual prefix that is already in use.
PrefixInUse :: DirLayerUserError

-- | Thrown if a prefix manually specified by the user previously conflicts
--   with a prefix chosen by the automatic allocator. Includes the
--   conflicting prefix.
ManualPrefixConflict :: ByteString -> DirLayerUserError

-- | The <tt>layer</tt> bytestring provided to <tt>open'</tt> does not
--   match the layer already present. The mismatched layers are included in
--   this constructor.
LayerMismatch :: ByteString -> ByteString -> DirLayerUserError

-- | Thrown if the directory layer structure already in FoundationDB is a
--   newer major version than that provided by this library. This would
--   mean that the directory layer was originally created by a newer
--   version of one of the FoundationDB client libraries. The major, minor,
--   micro version of the directory layer are provided to this constructor.
VersionError :: Word32 -> Word32 -> Word32 -> DirLayerUserError

-- | Errors arising from the foundationdb-haskell library implementation.
data FDBHsError

-- | Errors that can occur from user error when using the directory layer.
DirLayerUserError :: DirLayerUserError -> FDBHsError

-- | Errors that can occur when doing directory layer operations. These can
--   be indicative of bugs in foundationdb-haskell.
DirectoryLayerInternalError :: String -> FDBHsError

-- | Errors in parsing tuples.
ParseError :: String -> FDBHsError

-- | Thrown by foundationdb-haskell's transaction retry logic. Contains the
--   underlying error from the C bindings that caused the transaction to be
--   retried.
MaxRetriesExceeded :: Error -> FDBHsError

-- | Thrown by foundationdb-haskell on startup if the Haskell code doesn't
--   support the desired API version. This can happen even if the
--   underlying C library does support the desired version -- we sometimes
--   drop support for older versions sooner than the C API.
UnsupportedAPIVersion :: FDBHsError

-- | Errors that can come from the underlying C library. Most error names
--   are self-explanatory. See
--   <a>https://apple.github.io/foundationdb/api-error-codes.html#developer-guide-error-codes</a>
--   for a description of these errors.
data CError
OperationFailed :: CError
TimedOut :: CError
TransactionTooOld :: CError
FutureVersion :: CError

-- | Returned if a transaction failed because of a conflict.
NotCommitted :: CError
CommitUnknownResult :: CError
TransactionCanceled :: CError
TransactionTimedOut :: CError
TooManyWatches :: CError
WatchesDisabled :: CError
AccessedUnreadable :: CError
DatabaseLocked :: CError
ClusterVersionChanged :: CError
ExternalClientAlreadyLoaded :: CError
OperationCancelled :: CError
FutureReleased :: CError
PlatformError :: CError
LargeAllocFailed :: CError
PerformanceCounterError :: CError
IOError :: CError
FileNotFound :: CError
BindFailed :: CError
FileNotReadable :: CError
FileNotWritable :: CError
NoClusterFileFound :: CError
FileTooLarge :: CError
ClientInvalidOperation :: CError
CommitReadIncomplete :: CError
TestSpecificationInvalid :: CError
KeyOutsideLegalRange :: CError
InvertedRange :: CError
InvalidOptionValue :: CError
InvalidOption :: CError
NetworkNotSetup :: CError
NetworkAlreadySetup :: CError
ReadVersionAlreadySet :: CError
VersionInvalid :: CError
RangeLimitsInvalid :: CError
InvalidDatabaseName :: CError
AttributeNotFound :: CError
FutureNotSet :: CError
FutureNotError :: CError
UsedDuringCommit :: CError
InvalidMutationType :: CError
TransactionInvalidVersion :: CError
NoCommitVersion :: CError
EnvironmentVariableNetworkOptionFailed :: CError
TransactionReadOnly :: CError
IncompatibleProtocolVersion :: CError
TransactionTooLarge :: CError
KeyTooLarge :: CError
ValueTooLarge :: CError
ConnectionStringInvalid :: CError
AddressInUse :: CError
InvalidLocalAddress :: CError
TLSError :: CError
UnsupportedOperation :: CError
APIVersionUnset :: CError
APIVersionAlreadySet :: CError
APIVersionInvalid :: CError
APIVersionNotSupported :: CError
ExactModeWithoutLimits :: CError
UnknownError :: CError
InternalError :: CError
OtherError :: CFDBError -> CError
[getOtherError] :: CError -> CFDBError

-- | Returns true if the given error indicates that the erroring
--   transaction can be tried, but the transaction might have already been
--   committed. The transaction should only be retried if it is idempotent.
retryable :: Error -> Bool

-- | Returns true if the given error indicates that the transaction was
--   definitely not committed.
retryableNotCommitted :: Error -> Bool

module FoundationDB.Versionstamp.Internal

-- | Represents whether a versionstamp is complete (has been written to FDB
--   and thus contains a full version integer) or incomplete (contains a
--   user-provided version, but has not yet been committed to FDB).
data VersionstampCompleteness
Complete :: VersionstampCompleteness
Incomplete :: VersionstampCompleteness

-- | Represents a version stamp. Version stamps consist of * An 8-byte
--   transaction version * A 2-byte transaction batch order * A 2-byte user
--   version
data Versionstamp (a :: VersionstampCompleteness)

-- | A complete version stamp, consisting of
--   <a>TransactionVersionstamp</a>, and a user version set by the user.
[CompleteVersionstamp] :: TransactionVersionstamp -> Word16 -> Versionstamp  'Complete

-- | A version stamp that has not yet been associated with a completed
--   transaction. Such a version stamp does not yet have an associated
--   transaction version and transaction batch order, but does have a user
--   version.
[IncompleteVersionstamp] :: Word16 -> Versionstamp  'Incomplete

-- | A <a>TransactionVersionstamp</a> consists of a
--   monotonically-increasing 8-byte transaction version and a 2-byte
--   transaction batch order. Each transaction has an associated
--   <a>TransactionVersionstamp</a>.
data TransactionVersionstamp
TransactionVersionstamp :: Word64 -> Word16 -> TransactionVersionstamp
putTransactionVersionstamp :: Putter TransactionVersionstamp
encodeTransactionVersionstamp :: TransactionVersionstamp -> ByteString
putVersionstamp :: Putter (Versionstamp a)

-- | Encodes a versionstamp into a bytestring. You probably don't need
--   this; see the facilities in <a>FoundationDB.Layer.Tuple</a> for a more
--   flexible alternative.
encodeVersionstamp :: Versionstamp a -> ByteString
getTransactionVersionstamp :: Get TransactionVersionstamp
getVersionstampComplete :: Get (Versionstamp  'Complete)

-- | Decode a versionstamp from a raw bytestring. You probably don't need
--   this; see the facilities in <a>FoundationDB.Layer.Tuple</a> for a more
--   flexible alternative.
decodeVersionstamp :: ByteString -> Maybe (Versionstamp  'Complete)
decodeTransactionVersionstamp :: ByteString -> Maybe TransactionVersionstamp
instance GHC.Enum.Bounded FoundationDB.Versionstamp.Internal.TransactionVersionstamp
instance Control.DeepSeq.NFData FoundationDB.Versionstamp.Internal.TransactionVersionstamp
instance GHC.Generics.Generic FoundationDB.Versionstamp.Internal.TransactionVersionstamp
instance GHC.Classes.Ord FoundationDB.Versionstamp.Internal.TransactionVersionstamp
instance GHC.Classes.Eq FoundationDB.Versionstamp.Internal.TransactionVersionstamp
instance GHC.Read.Read FoundationDB.Versionstamp.Internal.TransactionVersionstamp
instance GHC.Show.Show FoundationDB.Versionstamp.Internal.TransactionVersionstamp
instance GHC.Show.Show (FoundationDB.Versionstamp.Internal.Versionstamp a)
instance GHC.Classes.Eq (FoundationDB.Versionstamp.Internal.Versionstamp a)
instance GHC.Classes.Ord (FoundationDB.Versionstamp.Internal.Versionstamp a)
instance GHC.Enum.Bounded (FoundationDB.Versionstamp.Internal.Versionstamp 'FoundationDB.Versionstamp.Internal.Complete)
instance Control.DeepSeq.NFData (FoundationDB.Versionstamp.Internal.Versionstamp a)


-- | Versionstamps. For a great overview, see
--   <a>https://forums.foundationdb.org/t/implementing-versionstamps-in-bindings/250</a>
module FoundationDB.Versionstamp

-- | Represents a version stamp. Version stamps consist of * An 8-byte
--   transaction version * A 2-byte transaction batch order * A 2-byte user
--   version
data Versionstamp (a :: VersionstampCompleteness)

-- | A complete version stamp, consisting of
--   <a>TransactionVersionstamp</a>, and a user version set by the user.
[CompleteVersionstamp] :: TransactionVersionstamp -> Word16 -> Versionstamp  'Complete

-- | A version stamp that has not yet been associated with a completed
--   transaction. Such a version stamp does not yet have an associated
--   transaction version and transaction batch order, but does have a user
--   version.
[IncompleteVersionstamp] :: Word16 -> Versionstamp  'Incomplete

-- | Represents whether a versionstamp is complete (has been written to FDB
--   and thus contains a full version integer) or incomplete (contains a
--   user-provided version, but has not yet been committed to FDB).
data VersionstampCompleteness
Complete :: VersionstampCompleteness
Incomplete :: VersionstampCompleteness

-- | A <a>TransactionVersionstamp</a> consists of a
--   monotonically-increasing 8-byte transaction version and a 2-byte
--   transaction batch order. Each transaction has an associated
--   <a>TransactionVersionstamp</a>.
data TransactionVersionstamp
TransactionVersionstamp :: Word64 -> Word16 -> TransactionVersionstamp

-- | Encodes a versionstamp into a bytestring. You probably don't need
--   this; see the facilities in <a>FoundationDB.Layer.Tuple</a> for a more
--   flexible alternative.
encodeVersionstamp :: Versionstamp a -> ByteString
encodeTransactionVersionstamp :: TransactionVersionstamp -> ByteString

-- | Decode a versionstamp from a raw bytestring. You probably don't need
--   this; see the facilities in <a>FoundationDB.Layer.Tuple</a> for a more
--   flexible alternative.
decodeVersionstamp :: ByteString -> Maybe (Versionstamp  'Complete)
decodeTransactionVersionstamp :: ByteString -> Maybe TransactionVersionstamp
transactionVersion :: TransactionVersionstamp -> Word64
transactionBatchOrder :: TransactionVersionstamp -> Word16
userVersion :: Versionstamp a -> Word16

module FoundationDB.Transaction

-- | A transaction monad. This is currently exported with a <a>MonadIO</a>
--   instance, but using it comes with caveats:
--   
--   <ul>
--   <li><a>runTransaction</a> will retry your transaction in some cases,
--   which means any IO in your transaction will be repeated.</li>
--   <li>Transactions have strict time limits, so slow IO operations should
--   be avoided.</li>
--   </ul>
data Transaction a

-- | Attempts to commit a transaction against the given database. If an
--   unretryable error occurs, throws an <a>Error</a>. Attempts to retry
--   the transaction for retryable errors.
runTransaction :: Database -> Transaction a -> IO a

-- | Like <a>runTransaction</a>, but returns a sum instead of throwing an
--   exception on errors.
runTransaction' :: Database -> Transaction a -> IO (Either Error a)

-- | Contains useful options that are not directly exposed by the C API
--   (for options that are, see <a>setOption</a>).
data TransactionConfig
TransactionConfig :: Bool -> Bool -> Int -> Int -> TransactionConfig

-- | When set to <a>True</a> (default is <a>False</a>), running the
--   transaction will retry even on errors where the transaction may have
--   completed successfully. When <a>False</a>, the transaction will retry
--   only when it is guaranteed that the transaction was not committed.
[idempotent] :: TransactionConfig -> Bool

-- | When set to <a>True</a> (default is <a>False</a>), reads will see the
--   effects of concurrent transactions, removing the default serializable
--   isolation guarantee. To enable this feature selectively within a
--   transaction, see <a>withSnapshot</a>.
[snapshotReads] :: TransactionConfig -> Bool

-- | Max number of times to retry retryable errors. After this many
--   retries, <a>MaxRetriesExceeded</a> will be thrown to the caller of
--   <a>runTransaction</a>.
[maxRetries] :: TransactionConfig -> Int

-- | Max number of milliseconds the transaction is allowed to run. If this
--   number is exceeded, the transaction fails with an error.
[timeout] :: TransactionConfig -> Int

-- | A config for a non-idempotent transaction, allowing 5 retries, with a
--   time limit of 500 milliseconds.
defaultConfig :: TransactionConfig

-- | Attempt to commit a transaction against the given database. If an
--   unretryable error occurs, throws an <a>Error</a>. Attempts to retry
--   the transaction for retryable errors.
runTransactionWithConfig :: TransactionConfig -> Database -> Transaction a -> IO a
runTransactionWithConfig' :: TransactionConfig -> Database -> Transaction a -> IO (Either Error a)

-- | Cancel a transaction. The transaction will not be committed, and will
--   throw <a>TransactionCanceled</a>.
cancel :: Transaction ()

-- | Reset the transaction. All operations prior to this will be discarded.
reset :: Transaction ()

-- | Runs a transaction using snapshot reads, which means that the
--   transaction will see the results of concurrent transactions, removing
--   the default serializable isolation guarantee.
withSnapshot :: Transaction a -> Transaction a

-- | Set one of the transaction options from the underlying C API.
setOption :: TransactionOption -> Transaction ()

-- | Gets the read version of the current transaction, representing all
--   transactions that were reported committed before this one.
getReadVersion :: Transaction (Future Word64)

-- | Sets the read version on the current transaction. As the FoundationDB
--   docs state, "this is not needed in simple cases".
setReadVersion :: Word64 -> Transaction ()

-- | Returns a <a>FutureIO</a> that will resolve to the versionstamp of the
--   committed transaction. Most applications won't need this.
getVersionstamp :: Transaction (FutureIO (Either Error TransactionVersionstamp))

-- | Get the value of a key. If the key does not exist, returns
--   <a>Nothing</a>.
get :: ByteString -> Transaction (Future (Maybe ByteString))

-- | Set a bytestring key to a bytestring value.
set :: ByteString -> ByteString -> Transaction ()

-- | Delete a key from the DB.
clear :: ByteString -> Transaction ()

-- | <tt>clearRange k l</tt> deletes all keys in the half-open range [k,l).
clearRange :: ByteString -> ByteString -> Transaction ()

-- | Tells FoundationDB to consider the given range to have been read by
--   this transaction.
addConflictRange :: ByteString -> ByteString -> FDBConflictRangeType -> Transaction ()
data FDBConflictRangeType
ConflictRangeTypeRead :: FDBConflictRangeType
ConflictRangeTypeWrite :: FDBConflictRangeType

-- | Tells FoundationDB to consider the given key to have been read by this
--   transaction.
addReadConflictKey :: ByteString -> Transaction ()

-- | Tells FoundationDB to consider the given key to have been written by
--   this transaction.
addWriteConflictKey :: ByteString -> Transaction ()

-- | Gets the key specified by the given <tt>KeySelector</tt>.
getKey :: KeySelector -> Transaction (Future ByteString)

-- | Get the public network addresses of all nodes responsible for storing
--   the given key.
getKeyAddresses :: ByteString -> Transaction (Future [ByteString])

-- | Perform an atomic operation of <tt>MutationType</tt> on the given key.
--   A transaction that performs only atomic operations is guaranteed not
--   to conflict. However, it may cause other concurrent transactions to
--   conflict.
atomicOp :: ByteString -> MutationType -> Transaction ()

-- | Reads all key-value pairs in the specified <a>Range</a> which are
--   lexicographically greater than or equal to the <a>rangeBegin</a>
--   <tt>KeySelector</tt> and lexicographically less than the
--   <a>rangeEnd</a> <tt>KeySelector</tt>. Uses
--   <tt>StreamingModeIterator</tt>, which assumes that you don't know
--   ahead of time exactly how many pairs in the range you actually need.
--   If you need them all (and they are expected to fit in memory), use
--   <a>getEntireRange</a>. For more advanced usage, use <a>getRange'</a>.
getRange :: Range -> Transaction (Future RangeResult)

-- | Like <a>getRange</a>, but allows you to specify the streaming mode as
--   desired.
getRange' :: Range -> FDBStreamingMode -> Transaction (Future RangeResult)
data FDBStreamingMode
StreamingModeWantAll :: FDBStreamingMode
StreamingModeIterator :: FDBStreamingMode
StreamingModeExact :: FDBStreamingMode
StreamingModeSmall :: FDBStreamingMode
StreamingModeMedium :: FDBStreamingMode
StreamingModeLarge :: FDBStreamingMode
StreamingModeSerial :: FDBStreamingMode

-- | Wrapper around <a>getRange</a> that reads the entire range into
--   memory.
getEntireRange :: Range -> Transaction (Seq (ByteString, ByteString))
getEntireRange' :: FDBStreamingMode -> Range -> Transaction (Seq (ByteString, ByteString))

-- | Return True iff the given range is empty.
isRangeEmpty :: Range -> Transaction Bool

-- | Specifies a range of keys to be iterated over by <a>getRange</a>.
data Range
Range :: KeySelector -> KeySelector -> Maybe Int -> Bool -> Range

-- | The beginning of the range, including the key specified by this
--   <tt>KeySelector</tt>.
[rangeBegin] :: Range -> KeySelector

-- | The end of the range, not including the key specified by this
--   <tt>KeySelector</tt>.
[rangeEnd] :: Range -> KeySelector

-- | If the range contains more than <tt>n</tt> items, return only <tt>Just
--   n</tt>. If <tt>Nothing</tt> is provided, returns the entire range.
[rangeLimit] :: Range -> Maybe Int

-- | If <a>True</a>, return the range in reverse order.
[rangeReverse] :: Range -> Bool
rangeKeys :: Range -> (ByteString, ByteString)

-- | <tt>keyRange begin end</tt> is the range of keys <tt>[begin,
--   end)</tt>.
keyRange :: ByteString -> ByteString -> Range

-- | <tt>keyRange begin end</tt> is the range of keys <tt>[begin,
--   end]</tt>.
keyRangeInclusive :: ByteString -> ByteString -> Range

-- | <tt>prefixRange prefix</tt> is the range of all keys of which
--   <tt>prefix</tt> is a prefix. Returns <tt>Nothing</tt> if
--   <tt>prefix</tt> is empty or contains only <tt>0xff</tt>.
prefixRange :: ByteString -> Maybe Range
prefixRangeEnd :: ByteString -> ByteString

-- | Structure for returning the result of <a>getRange</a> in chunks.
data RangeResult
RangeDone :: (Seq (ByteString, ByteString)) -> RangeResult
RangeMore :: (Seq (ByteString, ByteString)) -> (Future RangeResult) -> RangeResult

-- | Creates a future that will be fulfilled when the value associated with
--   the given key is changed, relative to the value it had as of the
--   current transaction's read version, or the last value to which the key
--   was previously set within the current transaction. This future is safe
--   to return from the transaction and await in IO. If the transaction in
--   which it was created fails to commit, awaiting it will return the same
--   error as running the transaction did.
watch :: ByteString -> Transaction (FutureIO ())

-- | A future result of a FoundationDB call. You can block on a future with
--   <a>await</a>. WARNING: returning a value of this type from
--   <a>runTransaction</a> and then calling <a>await</a> on the value in
--   another transaction will cause a segfault! Future versions of this
--   library may use more sophisticated types to prevent this.
data Future a

-- | Block until a future is ready. Unfortunately, does not seem to be
--   interruptible SIGPIPE (the interrupt sent by Control.Conccurent.Async
--   to cancel), even when using InterruptibleFFI.
await :: Future a -> Transaction a

-- | Polls a future for readiness in a loop until it is ready, then returns
--   the value in the future. This is less resource efficient than
--   <a>await</a>, but can be interrupted more easily.
awaitInterruptible :: Future a -> Transaction a

-- | Cancel a future. Attempts to await the future after cancellation will
--   throw <a>OperationCancelled</a>.
cancelFuture :: Future a -> Transaction ()

-- | Returns True if the future is ready. If so, calling <a>await</a> will
--   not block.
futureIsReady :: Future a -> Transaction Bool

-- | A future that can only be awaited after its transaction has committed.
--   That is, in contrast to <a>Future</a>, this <b>must</b> be returned
--   from <a>runTransaction</a> before it can safely be awaited. Use
--   <a>awaitIO</a> to await it. This future type is not needed frequently.
--   
--   All <a>FutureIO</a> functions work similarly to their <a>Future</a>
--   counterparts.
data FutureIO a

-- | IO analogue to <a>await</a>.
awaitIO :: FutureIO a -> IO (Either Error a)

-- | IO analogue to <a>awaitInterruptible</a>.
awaitInterruptibleIO :: FutureIO a -> IO a

-- | Cancel a future. Attempts to await the future after cancellation will
--   throw <a>OperationCancelled</a>.
cancelFutureIO :: FutureIO a -> IO ()
futureIsReadyIO :: FutureIO a -> IO Bool

-- | Specifies a key in the database. See the official <a>docs</a> for more
--   information. These can be supplied to <tt>getKey</tt> or used to build
--   a <tt>Range</tt>.
data KeySelector

-- | Selects the lexicographically greatest key less than the specified
--   key.
LastLessThan :: ByteString -> KeySelector

-- | Selects the lexicographically greatest less than or equal to the
--   specified key.
LastLessOrEq :: ByteString -> KeySelector

-- | Selects the lexicographically least key greater than the specified
--   key.
FirstGreaterThan :: ByteString -> KeySelector

-- | Selects the lexicographically least key greater than or equal to the
--   specified key.
FirstGreaterOrEq :: ByteString -> KeySelector

-- | Increase the offset of the given <tt>KeySelector</tt>.
offset :: Int -> KeySelector -> KeySelector

-- | The internal state of a transaction as it is being executed by
--   <a>runTransaction</a>.
data TransactionEnv
createTransactionEnv :: Database -> TransactionConfig -> ExceptT Error (ResourceT IO) TransactionEnv

-- | Execute a transactional action on an existing transaction environment.
onEnv :: TransactionEnv -> Transaction a -> IO (Either Error a)

-- | Attempts to commit a transaction. If <a>await</a>ing the returned
--   <a>Future</a> works without errors, the transaction was committed.
commitFuture :: Transaction (Future ())

-- | Calls the C API's <tt>fdb_transaction_on_error</tt> function.
--   Re-raises unretryable errors.
onError :: Error -> Transaction ()

-- | Gets the committed version of a transaction. Can only be called after
--   the transaction has committed, so must be used in conjunction with
--   <a>TransactionEnv</a>, since <a>runTransaction</a> and its variants
--   immediately destroy the internal <a>TransactionEnv</a> as soon as they
--   return.
getCommittedVersion :: Transaction Int
instance GHC.Show.Show FoundationDB.Transaction.RangeResult
instance Control.Monad.Catch.MonadMask FoundationDB.Transaction.Transaction
instance Control.Monad.Catch.MonadCatch FoundationDB.Transaction.Transaction
instance Control.Monad.Catch.MonadThrow FoundationDB.Transaction.Transaction
instance Control.Monad.IO.Class.MonadIO FoundationDB.Transaction.Transaction
instance GHC.Base.Monad FoundationDB.Transaction.Transaction
instance GHC.Base.Functor FoundationDB.Transaction.Transaction
instance GHC.Base.Applicative FoundationDB.Transaction.Transaction
instance GHC.Show.Show FoundationDB.Transaction.TransactionEnv
instance GHC.Classes.Ord FoundationDB.Transaction.TransactionConfig
instance GHC.Classes.Eq FoundationDB.Transaction.TransactionConfig
instance GHC.Read.Read FoundationDB.Transaction.TransactionConfig
instance GHC.Show.Show FoundationDB.Transaction.TransactionConfig
instance GHC.Classes.Ord FoundationDB.Transaction.Range
instance GHC.Classes.Eq FoundationDB.Transaction.Range
instance GHC.Show.Show FoundationDB.Transaction.Range
instance Control.Monad.Error.Class.MonadError FoundationDB.Error.Internal.Error FoundationDB.Transaction.Transaction
instance Control.Monad.Reader.Class.MonadReader FoundationDB.Transaction.TransactionEnv FoundationDB.Transaction.Transaction
instance Control.Monad.Trans.Resource.Internal.MonadResource FoundationDB.Transaction.Transaction
instance GHC.Show.Show a => GHC.Show.Show (FoundationDB.Transaction.Future a)
instance GHC.Base.Functor FoundationDB.Transaction.Future
instance GHC.Base.Applicative FoundationDB.Transaction.Future
instance GHC.Show.Show (FoundationDB.Transaction.FutureIO a)
instance GHC.Base.Functor FoundationDB.Transaction.FutureIO


-- | WIP interface for constructing and running transactions.
module FoundationDB

-- | Current version of the installed FDB library.
currentAPIVersion :: Int

-- | Handles correctly starting up the network connection to the DB. Can
--   only be called once per process! Throws an <a>Error</a> if any part of
--   setting up the connection FoundationDB fails.
withFoundationDB :: FoundationDBOptions -> (Database -> IO a) -> IO a

-- | Options set at the connection level for FoundationDB.
data FoundationDBOptions
FoundationDBOptions :: Int -> Maybe FilePath -> [NetworkOption] -> [DatabaseOption] -> FoundationDBOptions

-- | Desired API version. See <tt>currentAPIVersion</tt> for the latest
--   version installed on your system.
[apiVersion] :: FoundationDBOptions -> Int

-- | Path to your <tt>fdb.cluster</tt> file. If <a>Nothing</a>, uses
--   default location.
[clusterFile] :: FoundationDBOptions -> Maybe FilePath

-- | Additional network options. Each will be set in order.
[networkOptions] :: FoundationDBOptions -> [NetworkOption]

-- | Additional database options. Each will be set in order.
[databaseOptions] :: FoundationDBOptions -> [DatabaseOption]

-- | Uses the current API version, the default cluster file location, and
--   no additional options.
defaultOptions :: FoundationDBOptions

-- | Handle to the underlying C API client state.
data Database

-- | A transaction monad. This is currently exported with a <a>MonadIO</a>
--   instance, but using it comes with caveats:
--   
--   <ul>
--   <li><a>runTransaction</a> will retry your transaction in some cases,
--   which means any IO in your transaction will be repeated.</li>
--   <li>Transactions have strict time limits, so slow IO operations should
--   be avoided.</li>
--   </ul>
data Transaction a

-- | Attempts to commit a transaction against the given database. If an
--   unretryable error occurs, throws an <a>Error</a>. Attempts to retry
--   the transaction for retryable errors.
runTransaction :: Database -> Transaction a -> IO a

-- | Like <a>runTransaction</a>, but returns a sum instead of throwing an
--   exception on errors.
runTransaction' :: Database -> Transaction a -> IO (Either Error a)

-- | Contains useful options that are not directly exposed by the C API
--   (for options that are, see <a>setOption</a>).
data TransactionConfig
TransactionConfig :: Bool -> Bool -> Int -> Int -> TransactionConfig

-- | When set to <a>True</a> (default is <a>False</a>), running the
--   transaction will retry even on errors where the transaction may have
--   completed successfully. When <a>False</a>, the transaction will retry
--   only when it is guaranteed that the transaction was not committed.
[idempotent] :: TransactionConfig -> Bool

-- | When set to <a>True</a> (default is <a>False</a>), reads will see the
--   effects of concurrent transactions, removing the default serializable
--   isolation guarantee. To enable this feature selectively within a
--   transaction, see <a>withSnapshot</a>.
[snapshotReads] :: TransactionConfig -> Bool

-- | Max number of times to retry retryable errors. After this many
--   retries, <a>MaxRetriesExceeded</a> will be thrown to the caller of
--   <a>runTransaction</a>.
[maxRetries] :: TransactionConfig -> Int

-- | Max number of milliseconds the transaction is allowed to run. If this
--   number is exceeded, the transaction fails with an error.
[timeout] :: TransactionConfig -> Int

-- | A config for a non-idempotent transaction, allowing 5 retries, with a
--   time limit of 500 milliseconds.
defaultConfig :: TransactionConfig

-- | Attempt to commit a transaction against the given database. If an
--   unretryable error occurs, throws an <a>Error</a>. Attempts to retry
--   the transaction for retryable errors.
runTransactionWithConfig :: TransactionConfig -> Database -> Transaction a -> IO a
runTransactionWithConfig' :: TransactionConfig -> Database -> Transaction a -> IO (Either Error a)

-- | Cancel a transaction. The transaction will not be committed, and will
--   throw <a>TransactionCanceled</a>.
cancel :: Transaction ()

-- | Reset the transaction. All operations prior to this will be discarded.
reset :: Transaction ()

-- | Runs a transaction using snapshot reads, which means that the
--   transaction will see the results of concurrent transactions, removing
--   the default serializable isolation guarantee.
withSnapshot :: Transaction a -> Transaction a

-- | Set one of the transaction options from the underlying C API.
setOption :: TransactionOption -> Transaction ()

-- | Sets the read version on the current transaction. As the FoundationDB
--   docs state, "this is not needed in simple cases".
setReadVersion :: Word64 -> Transaction ()

-- | Gets the read version of the current transaction, representing all
--   transactions that were reported committed before this one.
getReadVersion :: Transaction (Future Word64)

-- | Returns a <a>FutureIO</a> that will resolve to the versionstamp of the
--   committed transaction. Most applications won't need this.
getVersionstamp :: Transaction (FutureIO (Either Error TransactionVersionstamp))

-- | Get the value of a key. If the key does not exist, returns
--   <a>Nothing</a>.
get :: ByteString -> Transaction (Future (Maybe ByteString))

-- | Set a bytestring key to a bytestring value.
set :: ByteString -> ByteString -> Transaction ()

-- | Delete a key from the DB.
clear :: ByteString -> Transaction ()

-- | <tt>clearRange k l</tt> deletes all keys in the half-open range [k,l).
clearRange :: ByteString -> ByteString -> Transaction ()

-- | Tells FoundationDB to consider the given range to have been read by
--   this transaction.
addConflictRange :: ByteString -> ByteString -> FDBConflictRangeType -> Transaction ()
data FDBConflictRangeType
ConflictRangeTypeRead :: FDBConflictRangeType
ConflictRangeTypeWrite :: FDBConflictRangeType

-- | Gets the key specified by the given <tt>KeySelector</tt>.
getKey :: KeySelector -> Transaction (Future ByteString)

-- | Get the public network addresses of all nodes responsible for storing
--   the given key.
getKeyAddresses :: ByteString -> Transaction (Future [ByteString])

-- | Perform an atomic operation of <tt>MutationType</tt> on the given key.
--   A transaction that performs only atomic operations is guaranteed not
--   to conflict. However, it may cause other concurrent transactions to
--   conflict.
atomicOp :: ByteString -> MutationType -> Transaction ()

-- | Reads all key-value pairs in the specified <a>Range</a> which are
--   lexicographically greater than or equal to the <a>rangeBegin</a>
--   <tt>KeySelector</tt> and lexicographically less than the
--   <a>rangeEnd</a> <tt>KeySelector</tt>. Uses
--   <tt>StreamingModeIterator</tt>, which assumes that you don't know
--   ahead of time exactly how many pairs in the range you actually need.
--   If you need them all (and they are expected to fit in memory), use
--   <a>getEntireRange</a>. For more advanced usage, use <a>getRange'</a>.
getRange :: Range -> Transaction (Future RangeResult)

-- | Like <a>getRange</a>, but allows you to specify the streaming mode as
--   desired.
getRange' :: Range -> FDBStreamingMode -> Transaction (Future RangeResult)
data FDBStreamingMode
StreamingModeWantAll :: FDBStreamingMode
StreamingModeIterator :: FDBStreamingMode
StreamingModeExact :: FDBStreamingMode
StreamingModeSmall :: FDBStreamingMode
StreamingModeMedium :: FDBStreamingMode
StreamingModeLarge :: FDBStreamingMode
StreamingModeSerial :: FDBStreamingMode

-- | Wrapper around <a>getRange</a> that reads the entire range into
--   memory.
getEntireRange :: Range -> Transaction (Seq (ByteString, ByteString))

-- | Return True iff the given range is empty.
isRangeEmpty :: Range -> Transaction Bool

-- | Specifies a range of keys to be iterated over by <a>getRange</a>.
data Range
Range :: KeySelector -> KeySelector -> Maybe Int -> Bool -> Range

-- | The beginning of the range, including the key specified by this
--   <tt>KeySelector</tt>.
[rangeBegin] :: Range -> KeySelector

-- | The end of the range, not including the key specified by this
--   <tt>KeySelector</tt>.
[rangeEnd] :: Range -> KeySelector

-- | If the range contains more than <tt>n</tt> items, return only <tt>Just
--   n</tt>. If <tt>Nothing</tt> is provided, returns the entire range.
[rangeLimit] :: Range -> Maybe Int

-- | If <a>True</a>, return the range in reverse order.
[rangeReverse] :: Range -> Bool
rangeKeys :: Range -> (ByteString, ByteString)

-- | <tt>keyRange begin end</tt> is the range of keys <tt>[begin,
--   end)</tt>.
keyRange :: ByteString -> ByteString -> Range

-- | <tt>keyRange begin end</tt> is the range of keys <tt>[begin,
--   end]</tt>.
keyRangeInclusive :: ByteString -> ByteString -> Range

-- | <tt>prefixRange prefix</tt> is the range of all keys of which
--   <tt>prefix</tt> is a prefix. Returns <tt>Nothing</tt> if
--   <tt>prefix</tt> is empty or contains only <tt>0xff</tt>.
prefixRange :: ByteString -> Maybe Range

-- | Structure for returning the result of <a>getRange</a> in chunks.
data RangeResult
RangeDone :: (Seq (ByteString, ByteString)) -> RangeResult
RangeMore :: (Seq (ByteString, ByteString)) -> (Future RangeResult) -> RangeResult

-- | Creates a future that will be fulfilled when the value associated with
--   the given key is changed, relative to the value it had as of the
--   current transaction's read version, or the last value to which the key
--   was previously set within the current transaction. This future is safe
--   to return from the transaction and await in IO. If the transaction in
--   which it was created fails to commit, awaiting it will return the same
--   error as running the transaction did.
watch :: ByteString -> Transaction (FutureIO ())

-- | A future result of a FoundationDB call. You can block on a future with
--   <a>await</a>. WARNING: returning a value of this type from
--   <a>runTransaction</a> and then calling <a>await</a> on the value in
--   another transaction will cause a segfault! Future versions of this
--   library may use more sophisticated types to prevent this.
data Future a

-- | Block until a future is ready. Unfortunately, does not seem to be
--   interruptible SIGPIPE (the interrupt sent by Control.Conccurent.Async
--   to cancel), even when using InterruptibleFFI.
await :: Future a -> Transaction a

-- | Polls a future for readiness in a loop until it is ready, then returns
--   the value in the future. This is less resource efficient than
--   <a>await</a>, but can be interrupted more easily.
awaitInterruptible :: Future a -> Transaction a

-- | Cancel a future. Attempts to await the future after cancellation will
--   throw <a>OperationCancelled</a>.
cancelFuture :: Future a -> Transaction ()

-- | Returns True if the future is ready. If so, calling <a>await</a> will
--   not block.
futureIsReady :: Future a -> Transaction Bool

-- | A future that can only be awaited after its transaction has committed.
--   That is, in contrast to <a>Future</a>, this <b>must</b> be returned
--   from <a>runTransaction</a> before it can safely be awaited. Use
--   <a>awaitIO</a> to await it. This future type is not needed frequently.
--   
--   All <a>FutureIO</a> functions work similarly to their <a>Future</a>
--   counterparts.
data FutureIO a

-- | IO analogue to <a>await</a>.
awaitIO :: FutureIO a -> IO (Either Error a)

-- | IO analogue to <a>awaitInterruptible</a>.
awaitInterruptibleIO :: FutureIO a -> IO a

-- | Cancel a future. Attempts to await the future after cancellation will
--   throw <a>OperationCancelled</a>.
cancelFutureIO :: FutureIO a -> IO ()
futureIsReadyIO :: FutureIO a -> IO Bool

-- | Specifies a key in the database. See the official <a>docs</a> for more
--   information. These can be supplied to <tt>getKey</tt> or used to build
--   a <tt>Range</tt>.
data KeySelector

-- | Selects the lexicographically greatest key less than the specified
--   key.
LastLessThan :: ByteString -> KeySelector

-- | Selects the lexicographically greatest less than or equal to the
--   specified key.
LastLessOrEq :: ByteString -> KeySelector

-- | Selects the lexicographically least key greater than the specified
--   key.
FirstGreaterThan :: ByteString -> KeySelector

-- | Selects the lexicographically least key greater than or equal to the
--   specified key.
FirstGreaterOrEq :: ByteString -> KeySelector

-- | Increase the offset of the given <tt>KeySelector</tt>.
offset :: Int -> KeySelector -> KeySelector

-- | Represents all errors that can occur when running a
--   <tt>Transaction</tt>.
data Error
CError :: CError -> Error
Error :: FDBHsError -> Error

-- | Errors that can come from the underlying C library. Most error names
--   are self-explanatory. See
--   <a>https://apple.github.io/foundationdb/api-error-codes.html#developer-guide-error-codes</a>
--   for a description of these errors.
data CError
OperationFailed :: CError
TimedOut :: CError
TransactionTooOld :: CError
FutureVersion :: CError

-- | Returned if a transaction failed because of a conflict.
NotCommitted :: CError
CommitUnknownResult :: CError
TransactionCanceled :: CError
TransactionTimedOut :: CError
TooManyWatches :: CError
WatchesDisabled :: CError
AccessedUnreadable :: CError
DatabaseLocked :: CError
ClusterVersionChanged :: CError
ExternalClientAlreadyLoaded :: CError
OperationCancelled :: CError
FutureReleased :: CError
PlatformError :: CError
LargeAllocFailed :: CError
PerformanceCounterError :: CError
IOError :: CError
FileNotFound :: CError
BindFailed :: CError
FileNotReadable :: CError
FileNotWritable :: CError
NoClusterFileFound :: CError
FileTooLarge :: CError
ClientInvalidOperation :: CError
CommitReadIncomplete :: CError
TestSpecificationInvalid :: CError
KeyOutsideLegalRange :: CError
InvertedRange :: CError
InvalidOptionValue :: CError
InvalidOption :: CError
NetworkNotSetup :: CError
NetworkAlreadySetup :: CError
ReadVersionAlreadySet :: CError
VersionInvalid :: CError
RangeLimitsInvalid :: CError
InvalidDatabaseName :: CError
AttributeNotFound :: CError
FutureNotSet :: CError
FutureNotError :: CError
UsedDuringCommit :: CError
InvalidMutationType :: CError
TransactionInvalidVersion :: CError
NoCommitVersion :: CError
EnvironmentVariableNetworkOptionFailed :: CError
TransactionReadOnly :: CError
IncompatibleProtocolVersion :: CError
TransactionTooLarge :: CError
KeyTooLarge :: CError
ValueTooLarge :: CError
ConnectionStringInvalid :: CError
AddressInUse :: CError
InvalidLocalAddress :: CError
TLSError :: CError
UnsupportedOperation :: CError
APIVersionUnset :: CError
APIVersionAlreadySet :: CError
APIVersionInvalid :: CError
APIVersionNotSupported :: CError
ExactModeWithoutLimits :: CError
UnknownError :: CError
InternalError :: CError
OtherError :: CFDBError -> CError
[getOtherError] :: CError -> CFDBError

-- | Returns true if the given error indicates that the erroring
--   transaction can be tried, but the transaction might have already been
--   committed. The transaction should only be retried if it is idempotent.
retryable :: Error -> Bool

-- | Starts up FoundationDB. You must call <a>stopFoundationDB</a> before
--   your program terminates. It's recommended that you use
--   <a>withFoundationDB</a> instead, since it handles cleanup. This
--   function is only intended to be used in GHCi. Can only be called once
--   per process! Throws an <a>Error</a> if any part of setting up the
--   connection FoundationDB fails.
startFoundationDB :: FoundationDBOptions -> IO Database
stopFoundationDB :: IO ()
instance GHC.Classes.Ord FoundationDB.FoundationDBOptions
instance GHC.Classes.Eq FoundationDB.FoundationDBOptions
instance GHC.Show.Show FoundationDB.FoundationDBOptions

module FoundationDB.Layer.Directory.Internal.Error
throwDirInternalError :: String -> Transaction a
throwDirUserError :: DirLayerUserError -> Transaction a

module FoundationDB.Layer.Tuple.Internal

-- | Elements of tuples. A tuple is represented as a list of these. Note
--   that a tuple may contain at most one incomplete version stamp. Future
--   versions of this library may introduce a more strongly typed tuple
--   representation that enforces this restriction.
data Elem

-- | Corresponds to null or nil types in other language bindings.
None :: Elem

-- | Nested tuples.
Tuple :: [Elem] -> Elem
Bytes :: ByteString -> Elem
Text :: Text -> Elem

-- | Variable-length integer encodings. For values that fit within a 64-bit
--   signed integer, the <a>standard integer</a> encoding is used. For
--   larger values, the <a>provisional spec</a> for Java and Python values
--   is used.
Int :: Integer -> Elem
Float :: Float -> Elem
Double :: Double -> Elem
Bool :: Bool -> Elem

-- | Crude UUID to avoid dependency on UUID library. Interconvertible with
--   <tt>toWords</tt> and <tt>fromWords</tt> in <a>UUID</a>.
UUID :: Word32 -> Word32 -> Word32 -> Word32 -> Elem
CompleteVS :: (Versionstamp  'Complete) -> Elem

-- | This constructor is to be used in conjunction with
--   <a>encodeTupleElems</a> and the <tt>setVersionstampedKey</tt> atomic
--   operation. See <a>encodeTupleElems</a> for more information.
IncompleteVS :: (Versionstamp  'Incomplete) -> Elem
sizeLimits :: Array Int Integer

-- | Returns smallest size limit greater than input.
bisectSize :: Integer -> Int

-- | Returns the minimum number of bits needed to encode the given int.
bitLen :: Integral a => a -> Int
nullCode :: Word8
bytesCode :: Word8
stringCode :: Word8
nestedCode :: Word8
zeroCode :: Word8
posEndCode :: Word8
negStartCode :: Word8
floatCode :: Word8
doubleCode :: Word8
falseCode :: Word8
trueCode :: Word8
uuidCode :: Word8
versionstampCode :: Word8
data SerializationState
SerializationState :: Int -> Maybe Int -> SerializationState
[currLength] :: SerializationState -> Int
[incompleteVersionstampPos] :: SerializationState -> Maybe Int
newtype PutTuple a
PutTuple :: StateT SerializationState PutM a -> PutTuple a
[unPutTuple] :: PutTuple a -> StateT SerializationState PutM a

-- | returns the serialized tuple and the position of the incomplete
--   version stamp, if any.
runPutTuple :: PutTuple () -> (ByteString, Maybe Int)
incrLength :: Int -> PutTuple ()
liftPutM :: PutM a -> PutTuple a
putWord8 :: Word8 -> PutTuple ()
putWord16be :: Word16 -> PutTuple ()
putWord32be :: Word32 -> PutTuple ()
putWord64be :: Word64 -> PutTuple ()
putByteString :: ByteString -> PutTuple ()
encodeBytes :: ByteString -> PutTuple ()
truncatedInt :: Int -> Integer -> ByteString
encodePosInt :: Integer -> PutTuple ()
encodeNegInt :: Integer -> PutTuple ()

-- | given an IEEE 754 float/double, adjust it for encoding.
floatAdjust :: Bool -> ByteString -> ByteString
encodeElem :: Bool -> Elem -> PutTuple ()

-- | Encodes a tuple from a list of tuple elements. Returns the encoded
--   tuple.
--   
--   Note: this encodes to the format expected by FoundationDB as input,
--   which is slightly different from the format returned by FoundationDB
--   as output. The difference is that if the encoded bytes include an
--   incomplete version stamp, four bytes are appended to the end to
--   indicate the index of the incomplete version stamp so that
--   FoundationDB can fill in the transaction version and batch order when
--   this function is used in conjunction with
--   <tt>setVersionstampedKey</tt> and <tt>setVersionstampedValue</tt>:
--   
--   <pre>
--   do let k = pack mySubspace [IncompleteVS (IncompleteVersionstamp 123)]
--      atomicOp k (setVersionstampedKey "my_value")
--   </pre>
--   
--   Because FoundationDB uses two bytes at the end of the key for this,
--   only one <a>IncompleteVS</a> can be used per key.
--   
--   This also means that <tt>(decodeTupleElems . encodeTupleElems)</tt>
--   gives strange results when an <a>IncompleteVS</a> is present in the
--   input, because the two extra bytes are interpreted as being part of
--   the tuple.
--   
--   <pre>
--   &gt;&gt;&gt; decodeTupleElems $ encodeTupleElems [IncompleteVS (IncompleteVersionstamp 1)]
--   Right [IncompleteVS (IncompleteVersionstamp 1),Bytes "",None,None]
--   </pre>
--   
--   For this reason, <a>decodeTupleElems</a> should only be called on keys
--   that have been returned from the database, because
--   <tt>setVersionstampedKey</tt> drops the last two bytes when it writes
--   the key to the database.
encodeTupleElems :: Traversable t => t Elem -> ByteString

-- | Like <a>encodeTupleElems</a>, but prepends a raw bytestring prefix to
--   the tuple. This is used by the subspace and directory layers.
encodeTupleElemsWPrefix :: Traversable t => ByteString -> t Elem -> ByteString

-- | Decodes a tuple, or returns a parse error. This function will never
--   return <a>IncompleteVS</a> tuple elements. See the note on
--   <a>encodeTupleElems</a> for more information.
decodeTupleElems :: ByteString -> Either String [Elem]

-- | Decodes a tuple that was encoded with a given prefix. Fails if the
--   input prefix is not actually a prefix of the encoded tuple.
decodeTupleElemsWPrefix :: ByteString -> ByteString -> Either String [Elem]
runGetComplete :: ByteString -> Get a -> Either String a
decodeElem :: Bool -> Get Elem
expectCode :: Word8 -> Get ()
bytesTerminator :: Get ()

-- | Reads all bytes up to (but not including) the terminator byte
getBytesUntilTerminator :: Get ByteString
decodeBytesElem :: Get Elem
decodeTextElem :: Get Elem
decodeSmallPosInt :: Word8 -> Get Elem
decodeSmallNegInt :: Word8 -> Get Elem
decodeLargeNegInt :: Get Elem
decodeLargePosInt :: Get Elem
decodeFloatElem :: Get Elem
decodeDoubleElem :: Get Elem
decodeUUIDElem :: Get Elem
decodeTupleElem :: Get Elem
decodeVersionstamp :: Get Elem
instance GHC.Base.Monad FoundationDB.Layer.Tuple.Internal.PutTuple
instance GHC.Base.Applicative FoundationDB.Layer.Tuple.Internal.PutTuple
instance GHC.Base.Functor FoundationDB.Layer.Tuple.Internal.PutTuple
instance GHC.Classes.Ord FoundationDB.Layer.Tuple.Internal.SerializationState
instance GHC.Classes.Eq FoundationDB.Layer.Tuple.Internal.SerializationState
instance GHC.Show.Show FoundationDB.Layer.Tuple.Internal.SerializationState
instance GHC.Generics.Generic FoundationDB.Layer.Tuple.Internal.Elem
instance GHC.Classes.Ord FoundationDB.Layer.Tuple.Internal.Elem
instance GHC.Classes.Eq FoundationDB.Layer.Tuple.Internal.Elem
instance GHC.Show.Show FoundationDB.Layer.Tuple.Internal.Elem
instance Control.Monad.State.Class.MonadState FoundationDB.Layer.Tuple.Internal.SerializationState FoundationDB.Layer.Tuple.Internal.PutTuple
instance Control.DeepSeq.NFData FoundationDB.Layer.Tuple.Internal.Elem

module FoundationDB.Layer.Tuple

-- | Elements of tuples. A tuple is represented as a list of these. Note
--   that a tuple may contain at most one incomplete version stamp. Future
--   versions of this library may introduce a more strongly typed tuple
--   representation that enforces this restriction.
data Elem

-- | Corresponds to null or nil types in other language bindings.
None :: Elem

-- | Nested tuples.
Tuple :: [Elem] -> Elem
Bytes :: ByteString -> Elem
Text :: Text -> Elem

-- | Variable-length integer encodings. For values that fit within a 64-bit
--   signed integer, the <a>standard integer</a> encoding is used. For
--   larger values, the <a>provisional spec</a> for Java and Python values
--   is used.
Int :: Integer -> Elem
Float :: Float -> Elem
Double :: Double -> Elem
Bool :: Bool -> Elem

-- | Crude UUID to avoid dependency on UUID library. Interconvertible with
--   <tt>toWords</tt> and <tt>fromWords</tt> in <a>UUID</a>.
UUID :: Word32 -> Word32 -> Word32 -> Word32 -> Elem
CompleteVS :: (Versionstamp  'Complete) -> Elem

-- | This constructor is to be used in conjunction with
--   <a>encodeTupleElems</a> and the <tt>setVersionstampedKey</tt> atomic
--   operation. See <a>encodeTupleElems</a> for more information.
IncompleteVS :: (Versionstamp  'Incomplete) -> Elem

-- | Encodes a tuple from a list of tuple elements. Returns the encoded
--   tuple.
--   
--   Note: this encodes to the format expected by FoundationDB as input,
--   which is slightly different from the format returned by FoundationDB
--   as output. The difference is that if the encoded bytes include an
--   incomplete version stamp, four bytes are appended to the end to
--   indicate the index of the incomplete version stamp so that
--   FoundationDB can fill in the transaction version and batch order when
--   this function is used in conjunction with
--   <tt>setVersionstampedKey</tt> and <tt>setVersionstampedValue</tt>:
--   
--   <pre>
--   do let k = pack mySubspace [IncompleteVS (IncompleteVersionstamp 123)]
--      atomicOp k (setVersionstampedKey "my_value")
--   </pre>
--   
--   Because FoundationDB uses two bytes at the end of the key for this,
--   only one <a>IncompleteVS</a> can be used per key.
--   
--   This also means that <tt>(decodeTupleElems . encodeTupleElems)</tt>
--   gives strange results when an <a>IncompleteVS</a> is present in the
--   input, because the two extra bytes are interpreted as being part of
--   the tuple.
--   
--   <pre>
--   &gt;&gt;&gt; decodeTupleElems $ encodeTupleElems [IncompleteVS (IncompleteVersionstamp 1)]
--   Right [IncompleteVS (IncompleteVersionstamp 1),Bytes "",None,None]
--   </pre>
--   
--   For this reason, <a>decodeTupleElems</a> should only be called on keys
--   that have been returned from the database, because
--   <tt>setVersionstampedKey</tt> drops the last two bytes when it writes
--   the key to the database.
encodeTupleElems :: Traversable t => t Elem -> ByteString

-- | Like <a>encodeTupleElems</a>, but prepends a raw bytestring prefix to
--   the tuple. This is used by the subspace and directory layers.
encodeTupleElemsWPrefix :: Traversable t => ByteString -> t Elem -> ByteString

-- | Decodes a tuple, or returns a parse error. This function will never
--   return <a>IncompleteVS</a> tuple elements. See the note on
--   <a>encodeTupleElems</a> for more information.
decodeTupleElems :: ByteString -> Either String [Elem]

-- | Decodes a tuple that was encoded with a given prefix. Fails if the
--   input prefix is not actually a prefix of the encoded tuple.
decodeTupleElemsWPrefix :: ByteString -> ByteString -> Either String [Elem]

module FoundationDB.Layer.Subspace

-- | Represents a subspace of <a>Tuple</a> keys. A subspace is just a
--   common prefix for a set of tuples.
newtype Subspace
Subspace :: ByteString -> Subspace
[rawPrefix] :: Subspace -> ByteString

-- | Create a subspace from a tuple.
subspace :: [Elem] -> Subspace

-- | Create a subspace from a raw bytestring prefix and a tuple.
prefixedSubspace :: ByteString -> [Elem] -> Subspace
subspaceKey :: Subspace -> ByteString

-- | Create a subsubspace by extending the prefix of a subspace by the
--   given tuple.
extend :: Subspace -> [Elem] -> Subspace
pack :: Subspace -> [Elem] -> ByteString
unpack :: Subspace -> ByteString -> Either String [Elem]

-- | Returns <a>True</a> iff the subspace contains the given key.
contains :: Subspace -> ByteString -> Bool
subspaceRange :: Subspace -> Range

-- | Get the last key,value pair in the subspace, if it exists.
getLast :: Subspace -> Transaction (Maybe (ByteString, ByteString))
instance GHC.Classes.Ord FoundationDB.Layer.Subspace.Subspace
instance GHC.Classes.Eq FoundationDB.Layer.Subspace.Subspace
instance GHC.Show.Show FoundationDB.Layer.Subspace.Subspace

module FoundationDB.Layer.Directory.Internal.Node

-- | Represents the result of searching for a node with <tt>find</tt>.
data FoundNode
FoundNode :: Subspace -> [Text] -> [Text] -> FoundNode
[nodeNodeSS] :: FoundNode -> Subspace
[nodePath] :: FoundNode -> [Text]
[targetPath] :: FoundNode -> [Text]
getFoundNodeLayer :: FoundNode -> Transaction ByteString
instance GHC.Classes.Ord FoundationDB.Layer.Directory.Internal.Node.FoundNode
instance GHC.Classes.Eq FoundationDB.Layer.Directory.Internal.Node.FoundNode
instance GHC.Show.Show FoundationDB.Layer.Directory.Internal.Node.FoundNode

module FoundationDB.Layer.Directory.Internal.HCA
oneBytes :: ByteString
data HCA
HCA :: Subspace -> Subspace -> HCA
[counters] :: HCA -> Subspace
[recent] :: HCA -> Subspace
newHCA :: Subspace -> HCA
windowSize :: Int -> Int

-- | global lock used for allocating. We use this simply because the other
--   clients have it. It's not yet clear to me why it's needed. TODO: find
--   out.
globalAllocateLock :: MVar ()
withAllocLock :: Transaction a -> Transaction a
findStartAndWindow :: HCA -> Bool -> Int -> Transaction (Int, Int)
findSubspaceLoop :: HCA -> Subspace -> Int -> Int -> Transaction (Maybe Subspace)
initStart :: HCA -> Transaction Int
allocate :: HCA -> Subspace -> Transaction Subspace
instance GHC.Classes.Ord FoundationDB.Layer.Directory.Internal.HCA.HCA
instance GHC.Classes.Eq FoundationDB.Layer.Directory.Internal.HCA.HCA
instance GHC.Show.Show FoundationDB.Layer.Directory.Internal.HCA.HCA


-- | This module is a relatively direct translation of the official
--   directory layer code in Python and Go.
module FoundationDB.Layer.Directory.Internal
_SUBDIRS :: Integer
majorVersion :: Word32
minorVersion :: Word32
microVersion :: Word32
throwing :: String -> Either a b -> Transaction b

-- | Represents a directory tree. A value of this type must be supplied to
--   all functions in this module.
data DirectoryLayer
DirectoryLayer :: Subspace -> Subspace -> HCA -> Subspace -> Bool -> [Text] -> DirectoryLayer

-- | Subspace for directory metadata.
[nodeSS] :: DirectoryLayer -> Subspace

-- | Subspace for directory content.
[contentSS] :: DirectoryLayer -> Subspace
[allocator] :: DirectoryLayer -> HCA
[rootNode] :: DirectoryLayer -> Subspace
[allowManualPrefixes] :: DirectoryLayer -> Bool
[dlPath] :: DirectoryLayer -> [Text]

-- | A path is a list of unicode strings.
type Path = [Text]

-- | Represents a single directory.
data Directory
Directory :: Subspace -> Path -> ByteString -> Directory
[directorySubspace] :: Directory -> Subspace
[directoryPath] :: Directory -> Path
[directoryLayer] :: Directory -> ByteString

-- | Gets the content subspace of a directory, which can be used to store
--   tuple-based keys.
dirSubspace :: Directory -> Subspace

-- | Gets the path of a directory.
dirPath :: Directory -> Path

-- | Gets the layer tag that was specified when the directory was created.
dirLayer :: Directory -> ByteString
data DirPartition
DirPartition :: DirectoryLayer -> DirectoryLayer -> DirPartition
[dirPartition] :: DirPartition -> DirectoryLayer
[dirPartitionParentDL] :: DirPartition -> DirectoryLayer

-- | Creates a new directory layer, containing a hierarchy of directories.
newDirectoryLayer :: Subspace -> Subspace -> Bool -> DirectoryLayer

-- | The default directory layer has node subspace prefix <tt>0xfe</tt>.
--   This corresponds to using the defaults for all arguments to the
--   <tt>DirectoryLayer</tt> constructor in other languages' bindings.
defaultDirLayer :: DirectoryLayer

-- | Tries to open a directory at the given path. If the directory exists,
--   returns it. Otherwise, returns <a>Nothing</a>.
open :: DirectoryLayer -> Path -> Transaction (Maybe Directory)

-- | Opens a directory at the given path. If the directory does not exist,
--   it is created.
createOrOpen :: DirectoryLayer -> Path -> Transaction Directory

-- | Open a directory, with optional custom prefix and layer. Returns
--   <a>Nothing</a> if the directory doesn't exist.
open' :: DirectoryLayer -> Path -> ByteString -> Maybe ByteString -> Transaction (Maybe Directory)

-- | Opens a directory at the given path, with optional custom prefix and
--   layer.
createOrOpen' :: DirectoryLayer -> Path -> ByteString -> Maybe ByteString -> Transaction Directory

-- | Returns <a>True</a> iff the given path exists.
exists :: DirectoryLayer -> Path -> Transaction Bool

-- | List the names of the immediate subdirectories of a directory. Returns
--   an empty list if the directory does not exist.
list :: DirectoryLayer -> Path -> Transaction (Seq Text)
data MoveError

-- | returned by <a>move</a> if you attempt to move a directory into a
--   subdirectory of itself.
SelfSubDir :: MoveError

-- | Returned by <a>move</a> if the source subdirectory does not exist.
SourceDoesNotExist :: MoveError

-- | Returned by <a>move</a> if you attempt to move a directory from one
--   partition to another.
MoveBetweenPartitions :: MoveError

-- | Returned by <a>move</a> if the destination directory already exists.
DestinationAlreadyExists :: MoveError

-- | Returned by <a>move</a> if the parent of the destination directory
--   doesn't already exist.
DestinationParentDoesNotExist :: MoveError

-- | Returned by <a>move</a> if the destination path is the root path.
CannotMoveToRoot :: MoveError

-- | Move a directory from one path to another.
move :: DirectoryLayer -> Path -> Path -> Transaction (Maybe MoveError)

-- | Remove a directory path, its contents, and all subdirectories. Returns
--   <a>True</a> if removal succeeds. Fails for nonexistent paths and the
--   root directory.
remove :: DirectoryLayer -> Path -> Transaction Bool

-- | Internal helper function that removes all subdirectories of the given
--   node subspace. Does not remove the given node from its parent.
removeRecursive :: DirectoryLayer -> Subspace -> Transaction ()

-- | Internal helper function that removes a path from its parent. Does not
--   remove the children of the removed path.
removeFromParent :: DirectoryLayer -> Path -> Transaction ()
subdirNameNodes :: DirectoryLayer -> Subspace -> Transaction (Seq (Text, Subspace))
subdirNames :: DirectoryLayer -> Subspace -> Transaction (Seq Text)
subdirNodes :: DirectoryLayer -> Subspace -> Transaction (Seq Subspace)
nodeContainingKey :: DirectoryLayer -> ByteString -> Transaction (Maybe Subspace)
isPrefixFree :: DirectoryLayer -> ByteString -> Transaction Bool
checkVersion :: DirectoryLayer -> Transaction ()
initializeDirectory :: DirectoryLayer -> Transaction ()
nodeWithPrefix :: DirectoryLayer -> ByteString -> Subspace

-- | Returns the longest prefix of <tt>path</tt> that doesn't exist. If the
--   entire path exists, returns it.
find :: DirectoryLayer -> Path -> Transaction (Maybe FoundNode)
contentsOfNodePartition :: DirectoryLayer -> Subspace -> Path -> Transaction DirPartition
contentsOfNodeSubspace :: DirectoryLayer -> Subspace -> Path -> ByteString -> Transaction Directory
instance GHC.Classes.Ord FoundationDB.Layer.Directory.Internal.MoveError
instance GHC.Classes.Eq FoundationDB.Layer.Directory.Internal.MoveError
instance GHC.Show.Show FoundationDB.Layer.Directory.Internal.MoveError
instance GHC.Classes.Ord FoundationDB.Layer.Directory.Internal.DirPartition
instance GHC.Classes.Eq FoundationDB.Layer.Directory.Internal.DirPartition
instance GHC.Show.Show FoundationDB.Layer.Directory.Internal.DirPartition
instance GHC.Classes.Ord FoundationDB.Layer.Directory.Internal.Directory
instance GHC.Classes.Eq FoundationDB.Layer.Directory.Internal.Directory
instance GHC.Show.Show FoundationDB.Layer.Directory.Internal.Directory
instance GHC.Classes.Ord FoundationDB.Layer.Directory.Internal.DirectoryLayer
instance GHC.Classes.Eq FoundationDB.Layer.Directory.Internal.DirectoryLayer
instance GHC.Show.Show FoundationDB.Layer.Directory.Internal.DirectoryLayer


-- | The directory layer. The directory layer provides tools for creating a
--   hierarchy of <tt>Subspace</tt>s, which can be operated on efficiently
--   with a directory-like API.
--   
--   This implementation of the directory layer does not yet support
--   directory partitions. They will be added in the future.
module FoundationDB.Layer.Directory

-- | Represents a directory tree. A value of this type must be supplied to
--   all functions in this module.
data DirectoryLayer

-- | The default directory layer has node subspace prefix <tt>0xfe</tt>.
--   This corresponds to using the defaults for all arguments to the
--   <tt>DirectoryLayer</tt> constructor in other languages' bindings.
defaultDirLayer :: DirectoryLayer

-- | Creates a new directory layer, containing a hierarchy of directories.
newDirectoryLayer :: Subspace -> Subspace -> Bool -> DirectoryLayer

-- | Represents a single directory.
data Directory

-- | A path is a list of unicode strings.
type Path = [Text]

-- | Gets the content subspace of a directory, which can be used to store
--   tuple-based keys.
dirSubspace :: Directory -> Subspace

-- | Gets the path of a directory.
dirPath :: Directory -> Path

-- | Gets the layer tag that was specified when the directory was created.
dirLayer :: Directory -> ByteString

-- | Tries to open a directory at the given path. If the directory exists,
--   returns it. Otherwise, returns <a>Nothing</a>.
open :: DirectoryLayer -> Path -> Transaction (Maybe Directory)

-- | Opens a directory at the given path. If the directory does not exist,
--   it is created.
createOrOpen :: DirectoryLayer -> Path -> Transaction Directory

-- | Move a directory from one path to another.
move :: DirectoryLayer -> Path -> Path -> Transaction (Maybe MoveError)

-- | Remove a directory path, its contents, and all subdirectories. Returns
--   <a>True</a> if removal succeeds. Fails for nonexistent paths and the
--   root directory.
remove :: DirectoryLayer -> Path -> Transaction Bool

-- | Returns <a>True</a> iff the given path exists.
exists :: DirectoryLayer -> Path -> Transaction Bool

-- | List the names of the immediate subdirectories of a directory. Returns
--   an empty list if the directory does not exist.
list :: DirectoryLayer -> Path -> Transaction (Seq Text)

-- | Open a directory, with optional custom prefix and layer. Returns
--   <a>Nothing</a> if the directory doesn't exist.
open' :: DirectoryLayer -> Path -> ByteString -> Maybe ByteString -> Transaction (Maybe Directory)

-- | Opens a directory at the given path, with optional custom prefix and
--   layer.
createOrOpen' :: DirectoryLayer -> Path -> ByteString -> Maybe ByteString -> Transaction Directory
